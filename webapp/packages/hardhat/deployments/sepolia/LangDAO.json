{
  "address": "0x4Fb5675e6baE48C95c1D4f1b154E3d5e8E36112C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tutorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        }
      ],
      "name": "SessionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tutor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "language",
          "type": "uint8"
        }
      ],
      "name": "SessionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "targetLanguage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "budgetPerSec",
          "type": "uint256"
        }
      ],
      "name": "StudentRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "languages",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratePerHour",
          "type": "uint256"
        }
      ],
      "name": "TutorRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PYUSD_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeSessions",
      "outputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tutor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratePerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "language",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_studentAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tutorAddress",
          "type": "address"
        }
      ],
      "name": "canAffordRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sessionId",
          "type": "uint256"
        }
      ],
      "name": "emergencyEndSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tutorAddress",
          "type": "address"
        }
      ],
      "name": "endSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sessionId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentSessionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sessionId",
          "type": "uint256"
        }
      ],
      "name": "getSession",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "student",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tutor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratePerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "language",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct LangDAO.Session",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_student",
          "type": "address"
        }
      ],
      "name": "getStudentInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "targetLanguage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "budgetPerSec",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_student",
          "type": "address"
        }
      ],
      "name": "getStudentPYUSDBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tutor",
          "type": "address"
        }
      ],
      "name": "getTutorInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sessionCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tutor",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_language",
          "type": "uint8"
        }
      ],
      "name": "getTutorLanguage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tutor",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_language",
          "type": "uint8"
        }
      ],
      "name": "getTutorRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserSessions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_studentAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tutorAddress",
          "type": "address"
        }
      ],
      "name": "hasSufficientBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStudying",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_isoCode",
          "type": "string"
        }
      ],
      "name": "isoToLanguage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_language",
          "type": "uint8"
        }
      ],
      "name": "languageToIso",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_targetLanguage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_budgetPerSec",
          "type": "uint256"
        }
      ],
      "name": "registerStudent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_languages",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256",
          "name": "_ratePerSecond",
          "type": "uint256"
        }
      ],
      "name": "registerTutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sessionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sessionHistory",
      "outputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tutor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratePerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "language",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tutorAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_language",
          "type": "uint8"
        }
      ],
      "name": "startSession",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "studentBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "students",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "targetLanguage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "budgetPerSec",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tutors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sessionCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_budgetPerSec",
          "type": "uint256"
        }
      ],
      "name": "updateBudget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_language",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_ratePerSecond",
          "type": "uint256"
        }
      ],
      "name": "updateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userSessions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfa42371b2cdbb62c0869e2563fbb37cf603bf466961fb0eb5d41577538f76cf3",
  "receipt": {
    "to": null,
    "from": "0x0B8b80B17C01Cf16fDb66C1A3F7008D8798f7Dad",
    "contractAddress": "0x4Fb5675e6baE48C95c1D4f1b154E3d5e8E36112C",
    "transactionIndex": 62,
    "gasUsed": "3037254",
    "logsBloom": "0x
    "blockHash": "0xddb2e43b985ec34474977620941683bb000e5202d3636c754810071cce917fd8",
    "transactionHash": "0xfa42371b2cdbb62c0869e2563fbb37cf603bf466961fb0eb5d41577538f76cf3",
    "logs": [],
    "blockNumber": 9493794,
    "cumulativeGasUsed": "9740862",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0B8b80B17C01Cf16fDb66C1A3F7008D8798f7Dad"
  ],
  "numDeployments": 1,
  "solcInputHash": "a6df8fb74f48d18ffd85b20d7e20fd9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tutorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"}],\"name\":\"SessionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"language\",\"type\":\"uint8\"}],\"name\":\"SessionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"targetLanguage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budgetPerSec\",\"type\":\"uint256\"}],\"name\":\"StudentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"languages\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratePerHour\",\"type\":\"uint256\"}],\"name\":\"TutorRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PYUSD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeSessions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_studentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tutorAddress\",\"type\":\"address\"}],\"name\":\"canAffordRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"}],\"name\":\"emergencyEndSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tutorAddress\",\"type\":\"address\"}],\"name\":\"endSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"}],\"name\":\"getCurrentSessionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sessionId\",\"type\":\"uint256\"}],\"name\":\"getSession\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct LangDAO.Session\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_student\",\"type\":\"address\"}],\"name\":\"getStudentInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"targetLanguage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"budgetPerSec\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_student\",\"type\":\"address\"}],\"name\":\"getStudentPYUSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tutor\",\"type\":\"address\"}],\"name\":\"getTutorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sessionCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tutor\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_language\",\"type\":\"uint8\"}],\"name\":\"getTutorLanguage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tutor\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_language\",\"type\":\"uint8\"}],\"name\":\"getTutorRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserSessions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_studentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tutorAddress\",\"type\":\"address\"}],\"name\":\"hasSufficientBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStudying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_isoCode\",\"type\":\"string\"}],\"name\":\"isoToLanguage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_language\",\"type\":\"uint8\"}],\"name\":\"languageToIso\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_targetLanguage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_budgetPerSec\",\"type\":\"uint256\"}],\"name\":\"registerStudent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_languages\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_ratePerSecond\",\"type\":\"uint256\"}],\"name\":\"registerTutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sessionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sessionHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tutorAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_language\",\"type\":\"uint8\"}],\"name\":\"startSession\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"studentBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"students\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"targetLanguage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"budgetPerSec\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tutors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sessionCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_budgetPerSec\",\"type\":\"uint256\"}],\"name\":\"updateBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_language\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_ratePerSecond\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canAffordRate(address,address)\":{\"params\":{\"_studentAddress\":\"Address of the student\",\"_tutorAddress\":\"Address of the tutor\"},\"returns\":{\"_0\":\"True if student can afford tutor's rate\"}},\"depositFunds(uint256)\":{\"params\":{\"_amount\":\"Amount of PYUSD tokens to deposit\"}},\"emergencyEndSession(uint256)\":{\"params\":{\"_sessionId\":\"ID of the session to end\"}},\"endSession(address)\":{\"details\":\"The backend will end the call if heartbeat signal is not received possibly due to disconnection from the call\",\"params\":{\"tutorAddress\":\"Tutor address of the session to end\"}},\"getCurrentSessionCost(uint256)\":{\"params\":{\"_sessionId\":\"ID of the active session\"},\"returns\":{\"_0\":\"Current total cost in wei\"}},\"getSession(uint256)\":{\"params\":{\"_sessionId\":\"ID of the session\"},\"returns\":{\"_0\":\"Session struct with all details\"}},\"getStudentPYUSDBalance(address)\":{\"params\":{\"_student\":\"Address of the student\"},\"returns\":{\"_0\":\"PYUSD balance\"}},\"getUserSessions(address)\":{\"params\":{\"_userAddress\":\"Address of the user\"},\"returns\":{\"_0\":\"Array of session IDs\"}},\"hasSufficientBalance(address,address)\":{\"params\":{\"_studentAddress\":\"Address of the user\",\"_tutorAddress\":\"Address of the tutor\"},\"returns\":{\"_0\":\"True if user has sufficient PYUSD balance\"}},\"isoToLanguage(string)\":{\"params\":{\"_isoCode\":\"ISO 639-1 language code (e.g., \\\"en\\\", \\\"es\\\")\"},\"returns\":{\"_0\":\"Language ID (uint8)\"}},\"languageToIso(uint8)\":{\"params\":{\"_language\":\"Language ID (uint8)\"},\"returns\":{\"_0\":\"ISO 639-1 language code string\"}},\"registerStudent(uint8,uint256)\":{\"params\":{\"_budgetPerSec\":\"Budget per second the student is willing to spend\",\"_targetLanguage\":\"Target language the student wants to learn\"}},\"registerTutor(uint8[],uint256)\":{\"params\":{\"_languages\":\"Array of languages the user can teach/learn\",\"_ratePerSecond\":\"Rate per hour (will be converted to per-second internally)\"}},\"startSession(address,uint8)\":{\"details\":\"The student is submitting a transaction to accept the call from the tutor to start the session\",\"params\":{\"_language\":\"Language being taught/learned\",\"_tutorAddress\":\"Address of the tutor\"},\"returns\":{\"_0\":\"sessionId The ID of the created session\"}},\"updateBudget(uint256)\":{\"params\":{\"_budgetPerSec\":\"Student budget per second\"}},\"updateRate(uint8,uint256)\":{\"params\":{\"_ratePerSecond\":\"New rate per hour\"}},\"withdrawFunds(uint256)\":{\"params\":{\"_amount\":\"Amount of PYUSD tokens to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canAffordRate(address,address)\":{\"notice\":\"Check if student can afford tutor's rate\"},\"depositFunds(uint256)\":{\"notice\":\"Deposit PYUSD funds into the contract\"},\"emergencyEndSession(uint256)\":{\"notice\":\"Emergency function to end any session (only owner)\"},\"endSession(address)\":{\"notice\":\"End an active sessionThe session will be ended by the student or tutor hanging up the call or the owner ending the session\"},\"getCurrentSessionCost(uint256)\":{\"notice\":\"Calculate current session cost\"},\"getSession(uint256)\":{\"notice\":\"Get session details\"},\"getStudentPYUSDBalance(address)\":{\"notice\":\"Get student's PYUSD balance\"},\"getTutorLanguage(address,uint8)\":{\"notice\":\"Getter functions for tutor data\"},\"getUserSessions(address)\":{\"notice\":\"Get user's session history\"},\"hasSufficientBalance(address,address)\":{\"notice\":\"Check if user has sufficient PYUSD balance for session\"},\"isoToLanguage(string)\":{\"notice\":\"Convert ISO 639-1 language code to language ID\"},\"languageToIso(uint8)\":{\"notice\":\"Convert language ID to ISO 639-1 language code\"},\"registerStudent(uint8,uint256)\":{\"notice\":\"Register a new student\"},\"registerTutor(uint8[],uint256)\":{\"notice\":\"Register a tutor\"},\"startSession(address,uint8)\":{\"notice\":\"Start a new session between student and tutorThe student has accepted the call from the tutor and the session is starting\"},\"updateBudget(uint256)\":{\"notice\":\"Update student's budget\"},\"updateRate(uint8,uint256)\":{\"notice\":\"Update user's rate\"},\"withdraw()\":{\"notice\":\"Withdraw contract balance (only owner)\"},\"withdrawFunds(uint256)\":{\"notice\":\"Withdraw PYUSD funds from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LangDAO.sol\":\"LangDAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/LangDAO.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * LangDAO - Language Learning Platform Smart Contract\\n *\\n * This contract manages:\\n * - User registration (students and tutors)\\n * - Session lifecycle (start, track, end)\\n * - Per-second payment processing\\n * - Tutor availability management\\n * - Session matching and history\\n *\\n * @author LangDAO Team\\n */\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n}\\n\\ncontract LangDAO {\\n    uint256 constant BUFFER_TIME = 10 minutes;\\n\\n    // PYUSD token address on Sepolia testnet\\n    address public constant PYUSD_TOKEN = 0xCaC524BcA292aaade2DF8A05cC58F0a65B1B3bB9;\\n\\n    // ============ LANGUAGE CONSTANTS ============\\n    // Using uint8 for efficient storage and gas optimization\\n    // Each language has a unique ID that maps to ISO 639-1 codes\\n    uint8 constant ENGLISH = 0; // en\\n    uint8 constant SPANISH = 1; // es\\n    uint8 constant FRENCH = 2; // fr\\n    uint8 constant GERMAN = 3; // de\\n    uint8 constant ITALIAN = 4; // it\\n    uint8 constant PORTUGUESE = 5; // pt\\n    uint8 constant RUSSIAN = 6; // ru\\n    uint8 constant CHINESE = 7; // zh\\n    uint8 constant JAPANESE = 8; // ja\\n    uint8 constant KOREAN = 9; // ko\\n    uint8 constant ARABIC = 10; // ar\\n    uint8 constant HINDI = 11; // hi\\n    uint8 constant DUTCH = 12; // nl\\n    uint8 constant SWEDISH = 13; // sv\\n    uint8 constant NORWEGIAN = 14; // no\\n    uint8 constant DANISH = 15; // da\\n    uint8 constant FINNISH = 16; // fi\\n    uint8 constant POLISH = 17; // pl\\n    uint8 constant TURKISH = 18; // tr\\n    uint8 constant GREEK = 19; // el\\n    uint8 constant HEBREW = 20; // he\\n    uint8 constant THAI = 21; // th\\n    uint8 constant VIETNAMESE = 22; // vi\\n    uint8 constant INDONESIAN = 23; // id\\n    uint8 constant MALAY = 24; // ms\\n    uint8 constant TAGALOG = 25; // tl\\n    uint8 constant UKRAINIAN = 26; // uk\\n    uint8 constant CZECH = 27; // cs\\n    uint8 constant HUNGARIAN = 28; // hu\\n    uint8 constant ROMANIAN = 29; // ro\\n    uint8 constant BULGARIAN = 30; // bg\\n    uint8 constant CROATIAN = 31; // hr\\n    uint8 constant SERBIAN = 32; // sr\\n    uint8 constant SLOVAK = 33; // sk\\n    uint8 constant SLOVENIAN = 34; // sl\\n    uint8 constant LITHUANIAN = 35; // lt\\n    uint8 constant LATVIAN = 36; // lv\\n    uint8 constant ESTONIAN = 37; // et\\n    uint8 constant UNSUPPORTED = 255; // for invalid languages\\n\\n    // ============ STRUCTS ============\\n    struct Student {\\n        uint8 targetLanguage;\\n        uint256 budgetPerSec;\\n        bool isRegistered;\\n    }\\n    struct Tutor {\\n        mapping(uint8 => bool) languages;\\n        mapping(uint8 => uint256) rateForLanguage;\\n        uint256 totalEarnings; // Total earnings as tutor\\n        uint256 sessionCount; // Total sessions participated in\\n        bool isRegistered;\\n    }\\n\\n    struct Session {\\n        address student;\\n        address tutor;\\n        address token;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 ratePerSecond;\\n        uint256 totalPaid;\\n        uint8 language; // Language being taught/learned\\n        uint256 id;\\n        bool isActive;\\n    }\\n\\n    // ============ STATE VARIABLES ============\\n    address public immutable owner;\\n    uint256 public sessionCounter;\\n\\n    // Mappings\\n    mapping(address => mapping(address => uint256)) public studentBalances;\\n    mapping(address => Student) public students;\\n    mapping(address => Tutor) public tutors;\\n    mapping(address => bool) public isStudying;\\n    mapping(address => Session) public activeSessions;\\n    mapping(uint256 => Session) public sessionHistory;\\n    mapping(address => uint256[]) public userSessions; // User's session IDs\\n\\n    // ============ EVENTS ============\\n\\n    event StudentRegistered(address indexed user, uint8 targetLanguage, uint256 budgetPerSec);\\n    event TutorRegistered(address indexed user, uint8[] languages, uint256 ratePerHour);\\n    event SessionStarted(uint256 indexed sessionId, address indexed student, address indexed tutor, uint8 language);\\n    event SessionEnded(uint256 indexed sessionId, address indexed tutorAddress, uint256 duration, uint256 totalPaid);\\n    event PaymentProcessed(address indexed from, address indexed to, uint256 amount);\\n    event FundsDeposited(address indexed user, address indexed token, uint256 amount);\\n    event FundsWithdrawn(address indexed user, address indexed token, uint256 amount);\\n\\n    // ============ MODIFIERS ============\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredStudents() {\\n        require(students[msg.sender].isRegistered, \\\"User not registered\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredTutors() {\\n        require(tutors[msg.sender].isRegistered, \\\"User not registered\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveSession(address tutorAddress) {\\n        require(activeSessions[tutorAddress].isActive, \\\"Session not active\\\");\\n        _;\\n    }\\n\\n    // ============ CONSTRUCTOR ============\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    // ============ USER MANAGEMENT ============\\n\\n    /**\\n     * Register a new student\\n     * @param _targetLanguage Target language the student wants to learn\\n     * @param _budgetPerSec Budget per second the student is willing to spend\\n     */\\n    function registerStudent(uint8 _targetLanguage, uint256 _budgetPerSec) external {\\n        require(_targetLanguage != UNSUPPORTED, \\\"Unsupported language\\\");\\n        require(!students[msg.sender].isRegistered, \\\"Student already registered\\\");\\n        students[msg.sender].isRegistered = true;\\n        students[msg.sender].targetLanguage = _targetLanguage;\\n        students[msg.sender].budgetPerSec = _budgetPerSec;\\n        emit StudentRegistered(msg.sender, _targetLanguage, _budgetPerSec);\\n    }\\n\\n    /**\\n     * Register a tutor\\n     * @param _languages Array of languages the user can teach/learn\\n     * @param _ratePerSecond Rate per hour (will be converted to per-second internally)\\n     */\\n\\n    function registerTutor(uint8[] memory _languages, uint256 _ratePerSecond) external {\\n        require(!tutors[msg.sender].isRegistered, \\\"Tutor already registered\\\");\\n        tutors[msg.sender].isRegistered = true;\\n\\n        for (uint256 i = 0; i < _languages.length; i++) {\\n            require(_languages[i] != UNSUPPORTED, \\\"Unsupported language\\\");\\n            tutors[msg.sender].languages[_languages[i]] = true;\\n            tutors[msg.sender].rateForLanguage[_languages[i]] = _ratePerSecond;\\n        }\\n\\n        emit TutorRegistered(msg.sender, _languages, _ratePerSecond);\\n    }\\n\\n    /**\\n     * Update student's budget\\n     * @param _budgetPerSec Student budget per second\\n     */\\n    function updateBudget(uint256 _budgetPerSec) external onlyRegisteredStudents {\\n        students[msg.sender].budgetPerSec = _budgetPerSec;\\n    }\\n\\n    /**\\n     * Update user's rate\\n     * @param _ratePerSecond New rate per hour\\n     */\\n    function updateRate(uint8 _language, uint256 _ratePerSecond) external onlyRegisteredTutors {\\n        require(tutors[msg.sender].languages[_language], \\\"Tutor does not offer this language\\\");\\n        tutors[msg.sender].rateForLanguage[_language] = _ratePerSecond;\\n    }\\n\\n    // ============ FUNDS MANAGEMENT ============\\n    /**\\n     * Deposit PYUSD funds into the contract\\n     * @param _amount Amount of PYUSD tokens to deposit\\n     */\\n    function depositFunds(uint256 _amount) external onlyRegisteredStudents {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        IERC20(PYUSD_TOKEN).transferFrom(msg.sender, address(this), _amount);\\n        studentBalances[msg.sender][PYUSD_TOKEN] += _amount;\\n        emit FundsDeposited(msg.sender, PYUSD_TOKEN, _amount);\\n    }\\n\\n    /**\\n     * Withdraw PYUSD funds from the contract\\n     * @param _amount Amount of PYUSD tokens to withdraw\\n     */\\n    function withdrawFunds(uint256 _amount) external onlyRegisteredStudents {\\n        require(!isStudying[msg.sender], \\\"Student is studying\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(studentBalances[msg.sender][PYUSD_TOKEN] >= _amount, \\\"Insufficient balance\\\");\\n        IERC20(PYUSD_TOKEN).transfer(msg.sender, _amount);\\n        studentBalances[msg.sender][PYUSD_TOKEN] -= _amount;\\n        emit FundsWithdrawn(msg.sender, PYUSD_TOKEN, _amount);\\n    }\\n\\n    // ============ SESSION MANAGEMENT ============\\n\\n    /**\\n     * Start a new session between student and tutor\\n     * @notice The student has accepted the call from the tutor and the session is starting\\n     * @dev The student is submitting a transaction to accept the call from the tutor to start the session\\n     * @param _tutorAddress Address of the tutor\\n     * @param _language Language being taught/learned\\n     * @return sessionId The ID of the created session\\n     */\\n    function startSession(address _tutorAddress, uint8 _language) external onlyRegisteredStudents returns (uint256) {\\n        require(!activeSessions[_tutorAddress].isActive, \\\"There should be no ongoing session for this tutor\\\");\\n        require(tutors[_tutorAddress].languages[_language], \\\"Tutor does not offer this language\\\");\\n        require(this.canAffordRate(msg.sender, _tutorAddress), \\\"Student cannot afford tutor's rate for this language\\\");\\n        require(this.hasSufficientBalance(msg.sender, _tutorAddress), \\\"Student does not have sufficient PYUSD balance\\\");\\n\\n        // - Create new session\\n        sessionCounter++;\\n        Session memory session = Session({\\n            student: msg.sender,\\n            tutor: _tutorAddress,\\n            token: PYUSD_TOKEN,\\n            startTime: block.timestamp,\\n            endTime: 0,\\n            ratePerSecond: tutors[_tutorAddress].rateForLanguage[_language],\\n            totalPaid: 0,\\n            language: _language,\\n            id: sessionCounter,\\n            isActive: true\\n        });\\n        activeSessions[_tutorAddress] = session;\\n        isStudying[msg.sender] = true;\\n\\n        sessionHistory[session.id] = session;\\n        userSessions[msg.sender].push(session.id);\\n        userSessions[_tutorAddress].push(session.id);\\n\\n        // - Emit SessionStarted event\\n        emit SessionStarted(session.id, msg.sender, _tutorAddress, _language);\\n\\n        return session.id;\\n    }\\n\\n    /**\\n     * End an active session\\n     * @notice The session will be ended by the student or tutor hanging up the call or the owner ending the session\\n     * @dev The backend will end the call if heartbeat signal is not received possibly due to disconnection from the call\\n     * @param tutorAddress Tutor address of the session to end\\n     */\\n    function endSession(address tutorAddress) external onlyActiveSession(tutorAddress) {\\n        // - Validate caller is student, tutor, or authorized service\\n        require(\\n            msg.sender == activeSessions[tutorAddress].student ||\\n                msg.sender == activeSessions[tutorAddress].tutor ||\\n                msg.sender == owner,\\n            \\\"Caller is not the student, tutor nor owner\\\"\\n        );\\n\\n        Session storage session = activeSessions[tutorAddress];\\n\\n        // - Calculate total payment based on duration\\n        uint256 duration = block.timestamp - session.startTime;\\n        uint256 calculatedPayment = duration * session.ratePerSecond;\\n\\n        // - Cap payment at student's available balance to prevent reverts\\n        uint256 availableBalance = studentBalances[session.student][session.token];\\n        uint256 totalPayment = calculatedPayment > availableBalance ? availableBalance : calculatedPayment;\\n\\n        // Deduct from user's contract balance\\n        studentBalances[session.student][session.token] -= totalPayment;\\n\\n        // Transfer from contract to tutor (guaranteed success)\\n        IERC20(session.token).transfer(session.tutor, totalPayment);\\n\\n        // - Update session status and end time\\n        session.totalPaid += totalPayment;\\n        session.endTime = block.timestamp;\\n\\n        // - Update user statistics\\n        Tutor storage tutor = tutors[session.tutor];\\n        tutor.totalEarnings += totalPayment;\\n        tutor.sessionCount++;\\n\\n        // - Update session history\\n        session.isActive = false;\\n        sessionHistory[session.id] = session;\\n\\n        emit SessionEnded(session.id, session.tutor, duration, totalPayment);\\n\\n        // Reset student studying status before deleting session\\n        isStudying[session.student] = false;\\n        delete activeSessions[tutorAddress];\\n    }\\n\\n    // ============ VIEW FUNCTIONS ============\\n\\n    /**\\n     * Get user's session history\\n     * @param _userAddress Address of the user\\n     * @return Array of session IDs\\n     */\\n    function getUserSessions(address _userAddress) external view returns (uint256[] memory) {\\n        return userSessions[_userAddress];\\n    }\\n\\n    /**\\n     * Get session details\\n     * @param _sessionId ID of the session\\n     * @return Session struct with all details\\n     */\\n    function getSession(uint256 _sessionId) external view returns (Session memory) {\\n        return sessionHistory[_sessionId];\\n    }\\n\\n    /**\\n     * Calculate current session cost\\n     * @param _sessionId ID of the active session\\n     * @return Current total cost in wei\\n     */\\n    function getCurrentSessionCost(uint256 _sessionId) external view returns (uint256) {\\n        Session memory session = sessionHistory[_sessionId];\\n        require(session.isActive, \\\"Session is not active\\\");\\n\\n        uint256 duration = block.timestamp - session.startTime;\\n        return duration * session.ratePerSecond;\\n    }\\n\\n    // ============ UTILITY FUNCTIONS ============\\n\\n    /**\\n     * Convert ISO 639-1 language code to language ID\\n     * @param _isoCode ISO 639-1 language code (e.g., \\\"en\\\", \\\"es\\\")\\n     * @return Language ID (uint8)\\n     */\\n    function isoToLanguage(string memory _isoCode) public pure returns (uint8) {\\n        bytes32 hash = keccak256(abi.encodePacked(_isoCode));\\n\\n        if (hash == keccak256(abi.encodePacked(\\\"en\\\"))) return ENGLISH;\\n        if (hash == keccak256(abi.encodePacked(\\\"es\\\"))) return SPANISH;\\n        if (hash == keccak256(abi.encodePacked(\\\"fr\\\"))) return FRENCH;\\n        if (hash == keccak256(abi.encodePacked(\\\"de\\\"))) return GERMAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"it\\\"))) return ITALIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"pt\\\"))) return PORTUGUESE;\\n        if (hash == keccak256(abi.encodePacked(\\\"ru\\\"))) return RUSSIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"zh\\\"))) return CHINESE;\\n        if (hash == keccak256(abi.encodePacked(\\\"ja\\\"))) return JAPANESE;\\n        if (hash == keccak256(abi.encodePacked(\\\"ko\\\"))) return KOREAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"ar\\\"))) return ARABIC;\\n        if (hash == keccak256(abi.encodePacked(\\\"hi\\\"))) return HINDI;\\n        if (hash == keccak256(abi.encodePacked(\\\"nl\\\"))) return DUTCH;\\n        if (hash == keccak256(abi.encodePacked(\\\"sv\\\"))) return SWEDISH;\\n        if (hash == keccak256(abi.encodePacked(\\\"no\\\"))) return NORWEGIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"da\\\"))) return DANISH;\\n        if (hash == keccak256(abi.encodePacked(\\\"fi\\\"))) return FINNISH;\\n        if (hash == keccak256(abi.encodePacked(\\\"pl\\\"))) return POLISH;\\n        if (hash == keccak256(abi.encodePacked(\\\"tr\\\"))) return TURKISH;\\n        if (hash == keccak256(abi.encodePacked(\\\"el\\\"))) return GREEK;\\n        if (hash == keccak256(abi.encodePacked(\\\"he\\\"))) return HEBREW;\\n        if (hash == keccak256(abi.encodePacked(\\\"th\\\"))) return THAI;\\n        if (hash == keccak256(abi.encodePacked(\\\"vi\\\"))) return VIETNAMESE;\\n        if (hash == keccak256(abi.encodePacked(\\\"id\\\"))) return INDONESIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"ms\\\"))) return MALAY;\\n        if (hash == keccak256(abi.encodePacked(\\\"tl\\\"))) return TAGALOG;\\n        if (hash == keccak256(abi.encodePacked(\\\"uk\\\"))) return UKRAINIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"cs\\\"))) return CZECH;\\n        if (hash == keccak256(abi.encodePacked(\\\"hu\\\"))) return HUNGARIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"ro\\\"))) return ROMANIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"bg\\\"))) return BULGARIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"hr\\\"))) return CROATIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"sr\\\"))) return SERBIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"sk\\\"))) return SLOVAK;\\n        if (hash == keccak256(abi.encodePacked(\\\"sl\\\"))) return SLOVENIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"lt\\\"))) return LITHUANIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"lv\\\"))) return LATVIAN;\\n        if (hash == keccak256(abi.encodePacked(\\\"et\\\"))) return ESTONIAN;\\n\\n        return UNSUPPORTED;\\n    }\\n\\n    /**\\n     * Convert language ID to ISO 639-1 language code\\n     * @param _language Language ID (uint8)\\n     * @return ISO 639-1 language code string\\n     */\\n    function languageToIso(uint8 _language) public pure returns (string memory) {\\n        if (_language == ENGLISH) return \\\"en\\\";\\n        if (_language == SPANISH) return \\\"es\\\";\\n        if (_language == FRENCH) return \\\"fr\\\";\\n        if (_language == GERMAN) return \\\"de\\\";\\n        if (_language == ITALIAN) return \\\"it\\\";\\n        if (_language == PORTUGUESE) return \\\"pt\\\";\\n        if (_language == RUSSIAN) return \\\"ru\\\";\\n        if (_language == CHINESE) return \\\"zh\\\";\\n        if (_language == JAPANESE) return \\\"ja\\\";\\n        if (_language == KOREAN) return \\\"ko\\\";\\n        if (_language == ARABIC) return \\\"ar\\\";\\n        if (_language == HINDI) return \\\"hi\\\";\\n        if (_language == DUTCH) return \\\"nl\\\";\\n        if (_language == SWEDISH) return \\\"sv\\\";\\n        if (_language == NORWEGIAN) return \\\"no\\\";\\n        if (_language == DANISH) return \\\"da\\\";\\n        if (_language == FINNISH) return \\\"fi\\\";\\n        if (_language == POLISH) return \\\"pl\\\";\\n        if (_language == TURKISH) return \\\"tr\\\";\\n        if (_language == GREEK) return \\\"el\\\";\\n        if (_language == HEBREW) return \\\"he\\\";\\n        if (_language == THAI) return \\\"th\\\";\\n        if (_language == VIETNAMESE) return \\\"vi\\\";\\n        if (_language == INDONESIAN) return \\\"id\\\";\\n        if (_language == MALAY) return \\\"ms\\\";\\n        if (_language == TAGALOG) return \\\"tl\\\";\\n        if (_language == UKRAINIAN) return \\\"uk\\\";\\n        if (_language == CZECH) return \\\"cs\\\";\\n        if (_language == HUNGARIAN) return \\\"hu\\\";\\n        if (_language == ROMANIAN) return \\\"ro\\\";\\n        if (_language == BULGARIAN) return \\\"bg\\\";\\n        if (_language == CROATIAN) return \\\"hr\\\";\\n        if (_language == SERBIAN) return \\\"sr\\\";\\n        if (_language == SLOVAK) return \\\"sk\\\";\\n        if (_language == SLOVENIAN) return \\\"sl\\\";\\n        if (_language == LITHUANIAN) return \\\"lt\\\";\\n        if (_language == LATVIAN) return \\\"lv\\\";\\n        if (_language == ESTONIAN) return \\\"et\\\";\\n\\n        return \\\"unsupported\\\";\\n    }\\n\\n    /**\\n     * Check if student can afford tutor's rate\\n     * @param _studentAddress Address of the student\\n     * @param _tutorAddress Address of the tutor\\n     * @return True if student can afford tutor's rate\\n     */\\n    function canAffordRate(address _studentAddress, address _tutorAddress) external view returns (bool) {\\n        uint8 language = students[_studentAddress].targetLanguage;\\n        uint256 ratePerSecond = tutors[_tutorAddress].rateForLanguage[language];\\n        return students[_studentAddress].budgetPerSec >= ratePerSecond;\\n    }\\n\\n    /**\\n     * Check if user has sufficient PYUSD balance for session\\n     * @param _studentAddress Address of the user\\n     * @param _tutorAddress Address of the tutor\\n     * @return True if user has sufficient PYUSD balance\\n     */\\n    function hasSufficientBalance(address _studentAddress, address _tutorAddress) external view returns (bool) {\\n        uint8 language = students[_studentAddress].targetLanguage;\\n        uint256 ratePerSecond = tutors[_tutorAddress].rateForLanguage[language];\\n        return studentBalances[_studentAddress][PYUSD_TOKEN] >= ratePerSecond * BUFFER_TIME;\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n\\n    /**\\n     * Emergency function to end any session (only owner)\\n     * @param _sessionId ID of the session to end\\n     */\\n    function emergencyEndSession(uint256 _sessionId) external onlyOwner {\\n        // TODO: Implement emergency session end\\n        // - Force end any session\\n        // - Process final payment\\n        // - Update all relevant state\\n    }\\n\\n    /**\\n     * Withdraw contract balance (only owner)\\n     */\\n    function withdraw() external onlyOwner {\\n        // TODO: Implement owner withdrawal\\n        // - Allow owner to withdraw any accumulated fees\\n    }\\n\\n    /**\\n     * Getter functions for tutor data\\n     */\\n    function getTutorLanguage(address _tutor, uint8 _language) external view returns (bool) {\\n        return tutors[_tutor].languages[_language];\\n    }\\n\\n    function getTutorRate(address _tutor, uint8 _language) external view returns (uint256) {\\n        return tutors[_tutor].rateForLanguage[_language];\\n    }\\n\\n    function getTutorInfo(\\n        address _tutor\\n    ) external view returns (uint256 totalEarnings, uint256 sessionCount, bool isRegistered) {\\n        return (tutors[_tutor].totalEarnings, tutors[_tutor].sessionCount, tutors[_tutor].isRegistered);\\n    }\\n\\n    function getStudentInfo(\\n        address _student\\n    ) external view returns (uint8 targetLanguage, uint256 budgetPerSec, bool isRegistered) {\\n        return (students[_student].targetLanguage, students[_student].budgetPerSec, students[_student].isRegistered);\\n    }\\n\\n    /**\\n     * Get student's PYUSD balance\\n     * @param _student Address of the student\\n     * @return PYUSD balance\\n     */\\n    function getStudentPYUSDBalance(address _student) external view returns (uint256) {\\n        return studentBalances[_student][PYUSD_TOKEN];\\n    }\\n\\n    /**\\n     * Function to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xe1d9a982f7b5167a69165292ff47f09421a95ddb2e635bd63acf1932951d848e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200369938038062003699833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b6080516135f0620000a9600039600081816108300152818161196001528181612283015261239a01526135f06000f3fe6080604052600436106101e75760003560e01c806351e072d611610102578063a80898ea11610095578063d480a36111610064578063d480a3611461097a578063e5ac1014146109c5578063ea997d6c146109e5578063ed128d5014610a0557600080fd5b8063a80898ea14610894578063a8aa7102146108e9578063cbb8547a14610916578063cc64e2af1461096457600080fd5b80637ce02794116100d15780637ce02794146107a05780638224a341146107c05780638da5cb5b1461081e578063a6c807a91461085257600080fd5b806351e072d6146107005780636613be4e146107205780636d597d1314610760578063795112951461078057600080fd5b80632b1262b01161017a578063402ff0db11610149578063402ff0db146104c757806344dc5224146105dd5780634b82caec1461060f5780635119d25e1461067d57600080fd5b80632b1262b0146104525780633b76594d146104725780633c766394146104925780633ccfd60b146104b257600080fd5b80631d66a762116101b65780631d66a762146102a0578063223715dd146102e057806323ef29361461030d5780632493d500146103ed57600080fd5b806301bf7ff6146101f357806311681d071461023e57806314974de814610260578063155dd5ee1461028057600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061022b61020e366004613068565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561024a57600080fd5b5061025e6102593660046130ac565b610a4e565b005b34801561026c57600080fd5b5061022b61027b3660046130d6565b610b72565b34801561028c57600080fd5b5061025e61029b366004613100565b611271565b3480156102ac57600080fd5b506102d06102bb366004613119565b60046020526000908152604090205460ff1681565b6040519015158152602001610235565b3480156102ec57600080fd5b506103006102fb366004613119565b6114ce565b604051610235919061313b565b34801561031957600080fd5b5061038f610328366004613119565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006860154600787015460088801546009909801546001600160a01b03978816999688169897909516969395949293919260ff9182169291168a565b604080516001600160a01b039b8c168152998b1660208b015297909916968801969096526060870194909452608086019290925260a085015260c084015260ff1660e083015261010082015290151561012082015261014001610235565b3480156103f957600080fd5b506102d0610408366004613068565b6001600160a01b03918216600081815260026020818152604080842080549690971684526003825280842060ff909616845260019586018252832054939092529052910154101590565b34801561045e57600080fd5b5061025e61046d3660046131c6565b61153a565b34801561047e57600080fd5b5061025e61048d366004613100565b61172f565b34801561049e57600080fd5b5061025e6104ad3660046130ac565b6118c0565b3480156104be57600080fd5b5061025e611955565b3480156104d357600080fd5b506105d06104e2366004613100565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091525060009081526006602081815260409283902083516101408101855281546001600160a01b03908116825260018301548116938201939093526002820154909216938201939093526003830154606082015260048301546080820152600583015460a08201529082015460c0820152600782015460ff90811660e08301526008830154610100830152600990920154909116151561012082015290565b6040516102359190613279565b3480156105e957600080fd5b506105fd6105f836600461331d565b6119bf565b60405160ff9091168152602001610235565b34801561061b57600080fd5b5061065c61062a366004613119565b6001600160a01b0316600090815260026020819052604090912080546001820154919092015460ff9283169391921690565b6040805160ff90941684526020840192909252151590820152606001610235565b34801561068957600080fd5b5061038f610698366004613100565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009909801546001600160a01b0397881699968816989790951696939592949293919260ff9182169291168a565b34801561070c57600080fd5b5061025e61071b366004613100565b6121ff565b34801561072c57600080fd5b5061074873cac524bca292aaade2df8a05cc58f0a65b1b3bb981565b6040516001600160a01b039091168152602001610235565b34801561076c57600080fd5b5061022b61077b3660046133b2565b612247565b34801561078c57600080fd5b5061025e61079b366004613100565b612278565b3480156107ac57600080fd5b5061025e6107bb366004613119565b6122e3565b3480156107cc57600080fd5b506108016107db366004613119565b600360208190526000918252604090912060028101549181015460049091015460ff1683565b604080519384526020840192909252151590820152606001610235565b34801561082a57600080fd5b506107487f000000000000000000000000000000000000000000000000000000000000000081565b34801561085e57600080fd5b5061065c61086d366004613119565b600260208190526000918252604090912080546001820154919092015460ff928316921683565b3480156108a057600080fd5b5061022b6108af366004613119565b6001600160a01b0316600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb9845290915290205490565b3480156108f557600080fd5b506109096109043660046133ce565b612852565b604051610235919061340d565b34801561092257600080fd5b50610801610931366004613119565b6001600160a01b031660009081526003602081905260409091206002810154918101546004909101549192909160ff1690565b34801561097057600080fd5b5061022b60005481565b34801561098657600080fd5b5061022b6109953660046130d6565b6001600160a01b038216600090815260036020908152604080832060ff8516845260010190915290205492915050565b3480156109d157600080fd5b506102d06109e0366004613068565b612eb3565b3480156109f157600080fd5b5061022b610a00366004613100565b612f42565b348015610a1157600080fd5b506102d0610a203660046130d6565b6001600160a01b0391909116600090815260036020908152604080832060ff94851684529091529020541690565b60fe1960ff831601610a9e5760405162461bcd60e51b8152602060048201526014602482015273556e737570706f72746564206c616e677561676560601b60448201526064015b60405180910390fd5b336000908152600260208190526040909120015460ff1615610b025760405162461bcd60e51b815260206004820152601a60248201527f53747564656e7420616c726561647920726567697374657265640000000000006044820152606401610a95565b336000818152600260208181526040928390209182018054600160ff19918216811790925583541660ff881690811784559201859055825191825281018490527ffe5b2460448f2d2597bf84d2f034eba36aee74fa0398907c1e9501aacd55ec5191015b60405180910390a25050565b3360009081526002602081905260408220015460ff16610ba45760405162461bcd60e51b8152600401610a9590613440565b6001600160a01b03831660009081526005602052604090206009015460ff1615610c2a5760405162461bcd60e51b815260206004820152603160248201527f54686572652073686f756c64206265206e6f206f6e676f696e6720736573736960448201527037b7103337b9103a3434b9903a3aba37b960791b6064820152608401610a95565b6001600160a01b038316600090815260036020908152604080832060ff808716855292529091205416610c6f5760405162461bcd60e51b8152600401610a959061346d565b604051622493d560e81b81523360048201526001600160a01b03841660248201523090632493d50090604401602060405180830381865afa158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc91906134af565b610d455760405162461bcd60e51b815260206004820152603460248201527f53747564656e742063616e6e6f74206166666f7264207475746f722773207261604482015273746520666f722074686973206c616e677561676560601b6064820152608401610a95565b60405163396b040560e21b81523360048201526001600160a01b0384166024820152309063e5ac101490604401602060405180830381865afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db391906134af565b610e165760405162461bcd60e51b815260206004820152602e60248201527f53747564656e7420646f6573206e6f7420686176652073756666696369656e7460448201526d2050595553442062616c616e636560901b6064820152608401610a95565b600080549080610e25836134e7565b91905055506000604051806101400160405280336001600160a01b03168152602001856001600160a01b0316815260200173cac524bca292aaade2df8a05cc58f0a65b1b3bb96001600160a01b031681526020014281526020016000815260200160036000876001600160a01b03166001600160a01b0316815260200190815260200160002060010160008660ff1660ff168152602001908152602001600020548152602001600081526020018460ff16815260200160005481526020016001151581525090508060056000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360ff16021790555061010082015181600801556101208201518160090160006101000a81548160ff021916908315150217905550905050600160046000336001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060066000836101000151815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360ff16021790555061010082015181600801556101208201518160090160006101000a81548160ff02191690831515021790555090505060076000336001600160a01b03166001600160a01b03168152602001908152602001600020816101000151908060018154018082558091505060019003906000526020600020016000909190919091505560076000856001600160a01b03166001600160a01b031681526020019081526020016000208161010001519080600181540180825580915050600190039060005260206000200160009091909190915055836001600160a01b0316336001600160a01b03168261010001517fa1b15600c9aef5c5d3c0c18700942ad4caf125753a856588b1aa2a0a969b00638660405161125b919060ff91909116815260200190565b60405180910390a4610100015190505b92915050565b336000908152600260208190526040909120015460ff166112a45760405162461bcd60e51b8152600401610a9590613440565b3360009081526004602052604090205460ff16156112fa5760405162461bcd60e51b815260206004820152601360248201527253747564656e74206973207374756479696e6760681b6044820152606401610a95565b6000811161134a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610a95565b33600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb984529091529020548111156113bf5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610a95565b60405163a9059cbb60e01b81523360048201526024810182905273cac524bca292aaade2df8a05cc58f0a65b1b3bb99063a9059cbb906044016020604051808303816000875af1158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b91906134af565b5033600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb984529091528120805483929061147a908490613500565b909155505060405181815273cac524bca292aaade2df8a05cc58f0a65b1b3bb99033907fa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a906020015b60405180910390a350565b6001600160a01b03811660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561152e57602002820191906000526020600020905b81548152602001906001019080831161151a575b50505050509050919050565b3360009081526003602052604090206004015460ff161561159d5760405162461bcd60e51b815260206004820152601860248201527f5475746f7220616c7265616479207265676973746572656400000000000000006044820152606401610a95565b336000908152600360205260408120600401805460ff191660011790555b82518110156116f35760ff80168382815181106115da576115da613513565b602002602001015160ff16036116295760405162461bcd60e51b8152602060048201526014602482015273556e737570706f72746564206c616e677561676560601b6044820152606401610a95565b33600090815260036020526040812084516001929086908590811061165057611650613513565b602002602001015160ff1660ff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508160036000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008584815181106116c0576116c0613513565b602002602001015160ff1660ff1681526020019081526020016000208190555080806116eb906134e7565b9150506115bb565b50336001600160a01b03167fb825f885fabbf774de69a1255df84b85b730a6553b26edb062877027b406d4498383604051610b66929190613529565b336000908152600260208190526040909120015460ff166117625760405162461bcd60e51b8152600401610a9590613440565b600081116117b25760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610a95565b6040516323b872dd60e01b81523360048201523060248201526044810182905273cac524bca292aaade2df8a05cc58f0a65b1b3bb9906323b872dd906064016020604051808303816000875af1158015611810573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183491906134af565b5033600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb9845290915281208054839290611873908490613574565b909155505060405181815273cac524bca292aaade2df8a05cc58f0a65b1b3bb99033907ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b0906020016114c3565b3360009081526003602052604090206004015460ff166118f25760405162461bcd60e51b8152600401610a9590613440565b33600090815260036020908152604080832060ff80871685529252909120541661192e5760405162461bcd60e51b8152600401610a959061346d565b33600090815260036020908152604080832060ff9095168352600190940190529190912055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119bd5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606401610a95565b565b600080826040516020016119d39190613587565b604051602081830303815290604052805190602001209050604051602001611a03906132b760f11b815260020190565b604051602081830303815290604052805190602001208103611a285750600092915050565b60405161657360f01b6020820152602201604051602081830303815290604052805190602001208103611a5e5750600192915050565b60405161333960f11b6020820152602201604051602081830303815290604052805190602001208103611a945750600292915050565b60405161646560f01b6020820152602201604051602081830303815290604052805190602001208103611aca5750600392915050565b604051611a5d60f21b6020820152602201604051602081830303815290604052805190602001208103611b005750600492915050565b604051611c1d60f21b6020820152602201604051602081830303815290604052805190602001208103611b365750600592915050565b60405161727560f01b6020820152602201604051602081830303815290604052805190602001208103611b6c5750600692915050565b604051610f4d60f31b6020820152602201604051602081830303815290604052805190602001208103611ba25750600792915050565b604051616a6160f01b6020820152602201604051602081830303815290604052805190602001208103611bd85750600892915050565b604051616b6f60f01b6020820152602201604051602081830303815290604052805190602001208103611c0e5750600992915050565b6040516130b960f11b6020820152602201604051602081830303815290604052805190602001208103611c445750600a92915050565b60405161686960f01b6020820152602201604051602081830303815290604052805190602001208103611c7a5750600b92915050565b604051611b9b60f21b6020820152602201604051602081830303815290604052805190602001208103611cb05750600c92915050565b6040516139bb60f11b6020820152602201604051602081830303815290604052805190602001208103611ce65750600d92915050565b604051616e6f60f01b6020820152602201604051602081830303815290604052805190602001208103611d1c5750600e92915050565b60405161646160f01b6020820152602201604051602081830303815290604052805190602001208103611d525750600f92915050565b60405161666960f01b6020820152602201604051602081830303815290604052805190602001208103611d885750601092915050565b604051611c1b60f21b6020820152602201604051602081830303815290604052805190602001208103611dbe5750601192915050565b604051613a3960f11b6020820152602201604051602081830303815290604052805190602001208103611df45750601292915050565b60405161195b60f21b6020820152602201604051602081830303815290604052805190602001208103611e2a5750601392915050565b60405161686560f01b6020820152602201604051602081830303815290604052805190602001208103611e605750601492915050565b604051610e8d60f31b6020820152602201604051602081830303815290604052805190602001208103611e965750601592915050565b60405161766960f01b6020820152602201604051602081830303815290604052805190602001208103611ecc5750601692915050565b604051611a5960f21b6020820152602201604051602081830303815290604052805190602001208103611f025750601792915050565b604051616d7360f01b6020820152602201604051602081830303815290604052805190602001208103611f385750601892915050565b604051611d1b60f21b6020820152602201604051602081830303815290604052805190602001208103611f6e5750601992915050565b60405161756b60f01b6020820152602201604051602081830303815290604052805190602001208103611fa45750601a92915050565b60405161637360f01b6020820152602201604051602081830303815290604052805190602001208103611fda5750601b92915050565b60405161687560f01b60208201526022016040516020818303038152906040528051906020012081036120105750601c92915050565b60405161726f60f01b60208201526022016040516020818303038152906040528051906020012081036120465750601d92915050565b60405161626760f01b602082015260220160405160208183030381529060405280519060200120810361207c5750601e92915050565b60405161343960f11b60208201526022016040516020818303038152906040528051906020012081036120b25750601f92915050565b6040516139b960f11b60208201526022016040516020818303038152906040528051906020012081036120e85750602092915050565b60405161736b60f01b602082015260220160405160208183030381529060405280519060200120810361211e5750602192915050565b604051611cdb60f21b60208201526022016040516020818303038152906040528051906020012081036121545750602292915050565b604051611b1d60f21b602082015260220160405160208183030381529060405280519060200120810361218a5750602392915050565b60405161363b60f11b60208201526022016040516020818303038152906040528051906020012081036121c05750602492915050565b60405161195d60f21b60208201526022016040516020818303038152906040528051906020012081036121f65750602592915050565b5060ff92915050565b336000908152600260208190526040909120015460ff166122325760405162461bcd60e51b8152600401610a9590613440565b33600090815260026020526040902060010155565b6007602052816000526040600020818154811061226357600080fd5b90600052602060002001600091509150505481565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146122e05760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606401610a95565b50565b6001600160a01b038116600090815260056020526040902060090154819060ff166123455760405162461bcd60e51b815260206004820152601260248201527153657373696f6e206e6f742061637469766560701b6044820152606401610a95565b6001600160a01b038281166000908152600560205260409020541633148061238957506001600160a01b038281166000908152600560205260409020600101541633145b806123bc5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61241b5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c6572206973206e6f74207468652073747564656e742c207475746f72604482015269103737b91037bbb732b960b11b6064820152608401610a95565b6001600160a01b038216600090815260056020526040812060038101549091906124459042613500565b9050600082600501548261245991906135a3565b83546001600160a01b0390811660009081526001602090815260408083206002890154909416835292905290812054919250818311612498578261249a565b815b85546001600160a01b03908116600090815260016020908152604080832060028b01549094168352929052908120805492935083929091906124dd908490613500565b90915550506002850154600186015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af115801561253b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255f91906134af565b50808560060160008282546125749190613574565b909155505042600486015560018501546001600160a01b03166000908152600360205260408120600281018054919284926125b0908490613574565b90915550506003810180549060006125c7836134e7565b919050555060008660090160006101000a81548160ff0219169083151502179055508560066000886008015481526020019081526020016000206000820160009054906101000a90046001600160a01b03168160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001820160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002820160009054906101000a90046001600160a01b03168160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600382015481600301556004820154816004015560058201548160050155600682015481600601556007820160009054906101000a900460ff168160070160006101000a81548160ff021916908360ff160217905550600882015481600801556009820160009054906101000a900460ff168160090160006101000a81548160ff0219169083151502179055509050508560010160009054906101000a90046001600160a01b03166001600160a01b031686600801547f1f566c0c31d295290bb19b5162e239dbdeeb51107556dd0c39b1a86a303ed39387856040516127b1929190918252602082015260400190565b60405180910390a3505092546001600160a01b039081166000908152600460208181526040808420805460ff1990811690915599909416835260059081905292822080546001600160a01b031990811682556001820180548216905560028201805490911690556003810183905590810182905591820181905560068201819055600782018054881690556008820155600901805490951690945550505050565b606060ff821661287a57505060408051808201909152600281526132b760f11b602082015290565b60001960ff8316016128a4575050604080518082019091526002815261657360f01b602082015290565b60011960ff8316016128ce575050604080518082019091526002815261333960f11b602082015290565b60021960ff8316016128f8575050604080518082019091526002815261646560f01b602082015290565b60031960ff8316016129225750506040805180820190915260028152611a5d60f21b602082015290565b60041960ff83160161294c5750506040805180820190915260028152611c1d60f21b602082015290565b60051960ff831601612976575050604080518082019091526002815261727560f01b602082015290565b60061960ff8316016129a05750506040805180820190915260028152610f4d60f31b602082015290565b60071960ff8316016129ca5750506040805180820190915260028152616a6160f01b602082015290565b60081960ff8316016129f45750506040805180820190915260028152616b6f60f01b602082015290565b60091960ff831601612a1e57505060408051808201909152600281526130b960f11b602082015290565b600a1960ff831601612a48575050604080518082019091526002815261686960f01b602082015290565b600b1960ff831601612a725750506040805180820190915260028152611b9b60f21b602082015290565b600c1960ff831601612a9c57505060408051808201909152600281526139bb60f11b602082015290565b600d1960ff831601612ac65750506040805180820190915260028152616e6f60f01b602082015290565b600e1960ff831601612af0575050604080518082019091526002815261646160f01b602082015290565b600f1960ff831601612b1a575050604080518082019091526002815261666960f01b602082015290565b60101960ff831601612b445750506040805180820190915260028152611c1b60f21b602082015290565b60111960ff831601612b6e5750506040805180820190915260028152613a3960f11b602082015290565b60121960ff831601612b98575050604080518082019091526002815261195b60f21b602082015290565b60131960ff831601612bc2575050604080518082019091526002815261686560f01b602082015290565b60141960ff831601612bec5750506040805180820190915260028152610e8d60f31b602082015290565b60151960ff831601612c16575050604080518082019091526002815261766960f01b602082015290565b60161960ff831601612c405750506040805180820190915260028152611a5960f21b602082015290565b60171960ff831601612c6a5750506040805180820190915260028152616d7360f01b602082015290565b60181960ff831601612c945750506040805180820190915260028152611d1b60f21b602082015290565b60191960ff831601612cbe575050604080518082019091526002815261756b60f01b602082015290565b601a1960ff831601612ce8575050604080518082019091526002815261637360f01b602082015290565b601b1960ff831601612d12575050604080518082019091526002815261687560f01b602082015290565b601c1960ff831601612d3c575050604080518082019091526002815261726f60f01b602082015290565b601d1960ff831601612d66575050604080518082019091526002815261626760f01b602082015290565b601e1960ff831601612d90575050604080518082019091526002815261343960f11b602082015290565b601f1960ff831601612dba57505060408051808201909152600281526139b960f11b602082015290565b60201960ff831601612de4575050604080518082019091526002815261736b60f01b602082015290565b60211960ff831601612e0e5750506040805180820190915260028152611cdb60f21b602082015290565b60221960ff831601612e385750506040805180820190915260028152611b1d60f21b602082015290565b60231960ff831601612e62575050604080518082019091526002815261363b60f11b602082015290565b60241960ff831601612e8c575050604080518082019091526002815261195d60f21b602082015290565b505060408051808201909152600b81526a1d5b9cdd5c1c1bdc9d195960aa1b602082015290565b6001600160a01b0382811660009081526002602090815260408083205493851683526003825280832060ff9094168084526001909401909152812054909190612efe610258826135a3565b6001600160a01b038616600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb9845290915290205410159250505092915050565b600081815260066020818152604080842081516101408101835281546001600160a01b03908116825260018301548116948201949094526002820154909316918301919091526003810154606083015260048101546080830152600581015460a08301529182015460c0820152600782015460ff90811660e08301526008830154610100830152600990920154909116151561012082018190526130205760405162461bcd60e51b815260206004820152601560248201527453657373696f6e206973206e6f742061637469766560581b6044820152606401610a95565b60008160600151426130329190613500565b90508160a001518161304491906135a3565b949350505050565b80356001600160a01b038116811461306357600080fd5b919050565b6000806040838503121561307b57600080fd5b6130848361304c565b91506130926020840161304c565b90509250929050565b803560ff8116811461306357600080fd5b600080604083850312156130bf57600080fd5b6130c88361309b565b946020939093013593505050565b600080604083850312156130e957600080fd5b6130f28361304c565b91506130926020840161309b565b60006020828403121561311257600080fd5b5035919050565b60006020828403121561312b57600080fd5b6131348261304c565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101561317357835183529284019291840191600101613157565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131be576131be61317f565b604052919050565b600080604083850312156131d957600080fd5b823567ffffffffffffffff808211156131f157600080fd5b818501915085601f83011261320557600080fd5b81356020828211156132195761321961317f565b8160051b925061322a818401613195565b828152928401810192818101908985111561324457600080fd5b948201945b848610156132695761325a8661309b565b82529482019490820190613249565b9997909101359750505050505050565b81516001600160a01b03168152610140810160208301516132a560208401826001600160a01b03169052565b5060408301516132c060408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e08301516132fd60e084018260ff169052565b506101008381015190830152610120928301511515929091019190915290565b6000602080838503121561333057600080fd5b823567ffffffffffffffff8082111561334857600080fd5b818501915085601f83011261335c57600080fd5b81358181111561336e5761336e61317f565b613380601f8201601f19168501613195565b9150808252868482850101111561339657600080fd5b8084840185840137600090820190930192909252509392505050565b600080604083850312156133c557600080fd5b6130c88361304c565b6000602082840312156133e057600080fd5b6131348261309b565b60005b838110156134045781810151838201526020016133ec565b50506000910152565b602081526000825180602084015261342c8160408501602087016133e9565b601f01601f19169190910160400192915050565b602080825260139082015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b604082015260600190565b60208082526022908201527f5475746f7220646f6573206e6f74206f666665722074686973206c616e677561604082015261676560f01b606082015260800190565b6000602082840312156134c157600080fd5b8151801515811461313457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134f9576134f96134d1565b5060010190565b8181038181111561126b5761126b6134d1565b634e487b7160e01b600052603260045260246000fd5b604080825283519082018190526000906020906060840190828701845b8281101561356557815160ff1684529284019290840190600101613546565b50505092019290925292915050565b8082018082111561126b5761126b6134d1565b600082516135998184602087016133e9565b9190910192915050565b808202811582820484141761126b5761126b6134d156fea264697066735822122075bec61b23912de2d4261ed64e5409dfb1d2089375f7dce009e2ac315d2d640864736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c806351e072d611610102578063a80898ea11610095578063d480a36111610064578063d480a3611461097a578063e5ac1014146109c5578063ea997d6c146109e5578063ed128d5014610a0557600080fd5b8063a80898ea14610894578063a8aa7102146108e9578063cbb8547a14610916578063cc64e2af1461096457600080fd5b80637ce02794116100d15780637ce02794146107a05780638224a341146107c05780638da5cb5b1461081e578063a6c807a91461085257600080fd5b806351e072d6146107005780636613be4e146107205780636d597d1314610760578063795112951461078057600080fd5b80632b1262b01161017a578063402ff0db11610149578063402ff0db146104c757806344dc5224146105dd5780634b82caec1461060f5780635119d25e1461067d57600080fd5b80632b1262b0146104525780633b76594d146104725780633c766394146104925780633ccfd60b146104b257600080fd5b80631d66a762116101b65780631d66a762146102a0578063223715dd146102e057806323ef29361461030d5780632493d500146103ed57600080fd5b806301bf7ff6146101f357806311681d071461023e57806314974de814610260578063155dd5ee1461028057600080fd5b366101ee57005b600080fd5b3480156101ff57600080fd5b5061022b61020e366004613068565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561024a57600080fd5b5061025e6102593660046130ac565b610a4e565b005b34801561026c57600080fd5b5061022b61027b3660046130d6565b610b72565b34801561028c57600080fd5b5061025e61029b366004613100565b611271565b3480156102ac57600080fd5b506102d06102bb366004613119565b60046020526000908152604090205460ff1681565b6040519015158152602001610235565b3480156102ec57600080fd5b506103006102fb366004613119565b6114ce565b604051610235919061313b565b34801561031957600080fd5b5061038f610328366004613119565b600560208190526000918252604090912080546001820154600283015460038401546004850154958501546006860154600787015460088801546009909801546001600160a01b03978816999688169897909516969395949293919260ff9182169291168a565b604080516001600160a01b039b8c168152998b1660208b015297909916968801969096526060870194909452608086019290925260a085015260c084015260ff1660e083015261010082015290151561012082015261014001610235565b3480156103f957600080fd5b506102d0610408366004613068565b6001600160a01b03918216600081815260026020818152604080842080549690971684526003825280842060ff909616845260019586018252832054939092529052910154101590565b34801561045e57600080fd5b5061025e61046d3660046131c6565b61153a565b34801561047e57600080fd5b5061025e61048d366004613100565b61172f565b34801561049e57600080fd5b5061025e6104ad3660046130ac565b6118c0565b3480156104be57600080fd5b5061025e611955565b3480156104d357600080fd5b506105d06104e2366004613100565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091525060009081526006602081815260409283902083516101408101855281546001600160a01b03908116825260018301548116938201939093526002820154909216938201939093526003830154606082015260048301546080820152600583015460a08201529082015460c0820152600782015460ff90811660e08301526008830154610100830152600990920154909116151561012082015290565b6040516102359190613279565b3480156105e957600080fd5b506105fd6105f836600461331d565b6119bf565b60405160ff9091168152602001610235565b34801561061b57600080fd5b5061065c61062a366004613119565b6001600160a01b0316600090815260026020819052604090912080546001820154919092015460ff9283169391921690565b6040805160ff90941684526020840192909252151590820152606001610235565b34801561068957600080fd5b5061038f610698366004613100565b600660208190526000918252604090912080546001820154600283015460038401546004850154600586015496860154600787015460088801546009909801546001600160a01b0397881699968816989790951696939592949293919260ff9182169291168a565b34801561070c57600080fd5b5061025e61071b366004613100565b6121ff565b34801561072c57600080fd5b5061074873cac524bca292aaade2df8a05cc58f0a65b1b3bb981565b6040516001600160a01b039091168152602001610235565b34801561076c57600080fd5b5061022b61077b3660046133b2565b612247565b34801561078c57600080fd5b5061025e61079b366004613100565b612278565b3480156107ac57600080fd5b5061025e6107bb366004613119565b6122e3565b3480156107cc57600080fd5b506108016107db366004613119565b600360208190526000918252604090912060028101549181015460049091015460ff1683565b604080519384526020840192909252151590820152606001610235565b34801561082a57600080fd5b506107487f000000000000000000000000000000000000000000000000000000000000000081565b34801561085e57600080fd5b5061065c61086d366004613119565b600260208190526000918252604090912080546001820154919092015460ff928316921683565b3480156108a057600080fd5b5061022b6108af366004613119565b6001600160a01b0316600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb9845290915290205490565b3480156108f557600080fd5b506109096109043660046133ce565b612852565b604051610235919061340d565b34801561092257600080fd5b50610801610931366004613119565b6001600160a01b031660009081526003602081905260409091206002810154918101546004909101549192909160ff1690565b34801561097057600080fd5b5061022b60005481565b34801561098657600080fd5b5061022b6109953660046130d6565b6001600160a01b038216600090815260036020908152604080832060ff8516845260010190915290205492915050565b3480156109d157600080fd5b506102d06109e0366004613068565b612eb3565b3480156109f157600080fd5b5061022b610a00366004613100565b612f42565b348015610a1157600080fd5b506102d0610a203660046130d6565b6001600160a01b0391909116600090815260036020908152604080832060ff94851684529091529020541690565b60fe1960ff831601610a9e5760405162461bcd60e51b8152602060048201526014602482015273556e737570706f72746564206c616e677561676560601b60448201526064015b60405180910390fd5b336000908152600260208190526040909120015460ff1615610b025760405162461bcd60e51b815260206004820152601a60248201527f53747564656e7420616c726561647920726567697374657265640000000000006044820152606401610a95565b336000818152600260208181526040928390209182018054600160ff19918216811790925583541660ff881690811784559201859055825191825281018490527ffe5b2460448f2d2597bf84d2f034eba36aee74fa0398907c1e9501aacd55ec5191015b60405180910390a25050565b3360009081526002602081905260408220015460ff16610ba45760405162461bcd60e51b8152600401610a9590613440565b6001600160a01b03831660009081526005602052604090206009015460ff1615610c2a5760405162461bcd60e51b815260206004820152603160248201527f54686572652073686f756c64206265206e6f206f6e676f696e6720736573736960448201527037b7103337b9103a3434b9903a3aba37b960791b6064820152608401610a95565b6001600160a01b038316600090815260036020908152604080832060ff808716855292529091205416610c6f5760405162461bcd60e51b8152600401610a959061346d565b604051622493d560e81b81523360048201526001600160a01b03841660248201523090632493d50090604401602060405180830381865afa158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc91906134af565b610d455760405162461bcd60e51b815260206004820152603460248201527f53747564656e742063616e6e6f74206166666f7264207475746f722773207261604482015273746520666f722074686973206c616e677561676560601b6064820152608401610a95565b60405163396b040560e21b81523360048201526001600160a01b0384166024820152309063e5ac101490604401602060405180830381865afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db391906134af565b610e165760405162461bcd60e51b815260206004820152602e60248201527f53747564656e7420646f6573206e6f7420686176652073756666696369656e7460448201526d2050595553442062616c616e636560901b6064820152608401610a95565b600080549080610e25836134e7565b91905055506000604051806101400160405280336001600160a01b03168152602001856001600160a01b0316815260200173cac524bca292aaade2df8a05cc58f0a65b1b3bb96001600160a01b031681526020014281526020016000815260200160036000876001600160a01b03166001600160a01b0316815260200190815260200160002060010160008660ff1660ff168152602001908152602001600020548152602001600081526020018460ff16815260200160005481526020016001151581525090508060056000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360ff16021790555061010082015181600801556101208201518160090160006101000a81548160ff021916908315150217905550905050600160046000336001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060066000836101000151815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908360ff16021790555061010082015181600801556101208201518160090160006101000a81548160ff02191690831515021790555090505060076000336001600160a01b03166001600160a01b03168152602001908152602001600020816101000151908060018154018082558091505060019003906000526020600020016000909190919091505560076000856001600160a01b03166001600160a01b031681526020019081526020016000208161010001519080600181540180825580915050600190039060005260206000200160009091909190915055836001600160a01b0316336001600160a01b03168261010001517fa1b15600c9aef5c5d3c0c18700942ad4caf125753a856588b1aa2a0a969b00638660405161125b919060ff91909116815260200190565b60405180910390a4610100015190505b92915050565b336000908152600260208190526040909120015460ff166112a45760405162461bcd60e51b8152600401610a9590613440565b3360009081526004602052604090205460ff16156112fa5760405162461bcd60e51b815260206004820152601360248201527253747564656e74206973207374756479696e6760681b6044820152606401610a95565b6000811161134a5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610a95565b33600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb984529091529020548111156113bf5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610a95565b60405163a9059cbb60e01b81523360048201526024810182905273cac524bca292aaade2df8a05cc58f0a65b1b3bb99063a9059cbb906044016020604051808303816000875af1158015611417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143b91906134af565b5033600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb984529091528120805483929061147a908490613500565b909155505060405181815273cac524bca292aaade2df8a05cc58f0a65b1b3bb99033907fa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a906020015b60405180910390a350565b6001600160a01b03811660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561152e57602002820191906000526020600020905b81548152602001906001019080831161151a575b50505050509050919050565b3360009081526003602052604090206004015460ff161561159d5760405162461bcd60e51b815260206004820152601860248201527f5475746f7220616c7265616479207265676973746572656400000000000000006044820152606401610a95565b336000908152600360205260408120600401805460ff191660011790555b82518110156116f35760ff80168382815181106115da576115da613513565b602002602001015160ff16036116295760405162461bcd60e51b8152602060048201526014602482015273556e737570706f72746564206c616e677561676560601b6044820152606401610a95565b33600090815260036020526040812084516001929086908590811061165057611650613513565b602002602001015160ff1660ff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508160036000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160008584815181106116c0576116c0613513565b602002602001015160ff1660ff1681526020019081526020016000208190555080806116eb906134e7565b9150506115bb565b50336001600160a01b03167fb825f885fabbf774de69a1255df84b85b730a6553b26edb062877027b406d4498383604051610b66929190613529565b336000908152600260208190526040909120015460ff166117625760405162461bcd60e51b8152600401610a9590613440565b600081116117b25760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610a95565b6040516323b872dd60e01b81523360048201523060248201526044810182905273cac524bca292aaade2df8a05cc58f0a65b1b3bb9906323b872dd906064016020604051808303816000875af1158015611810573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183491906134af565b5033600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb9845290915281208054839290611873908490613574565b909155505060405181815273cac524bca292aaade2df8a05cc58f0a65b1b3bb99033907ff0d0e99cae184d0187b093b48894117462462379674a6e11d89c3fbb618e96b0906020016114c3565b3360009081526003602052604090206004015460ff166118f25760405162461bcd60e51b8152600401610a9590613440565b33600090815260036020908152604080832060ff80871685529252909120541661192e5760405162461bcd60e51b8152600401610a959061346d565b33600090815260036020908152604080832060ff9095168352600190940190529190912055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119bd5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606401610a95565b565b600080826040516020016119d39190613587565b604051602081830303815290604052805190602001209050604051602001611a03906132b760f11b815260020190565b604051602081830303815290604052805190602001208103611a285750600092915050565b60405161657360f01b6020820152602201604051602081830303815290604052805190602001208103611a5e5750600192915050565b60405161333960f11b6020820152602201604051602081830303815290604052805190602001208103611a945750600292915050565b60405161646560f01b6020820152602201604051602081830303815290604052805190602001208103611aca5750600392915050565b604051611a5d60f21b6020820152602201604051602081830303815290604052805190602001208103611b005750600492915050565b604051611c1d60f21b6020820152602201604051602081830303815290604052805190602001208103611b365750600592915050565b60405161727560f01b6020820152602201604051602081830303815290604052805190602001208103611b6c5750600692915050565b604051610f4d60f31b6020820152602201604051602081830303815290604052805190602001208103611ba25750600792915050565b604051616a6160f01b6020820152602201604051602081830303815290604052805190602001208103611bd85750600892915050565b604051616b6f60f01b6020820152602201604051602081830303815290604052805190602001208103611c0e5750600992915050565b6040516130b960f11b6020820152602201604051602081830303815290604052805190602001208103611c445750600a92915050565b60405161686960f01b6020820152602201604051602081830303815290604052805190602001208103611c7a5750600b92915050565b604051611b9b60f21b6020820152602201604051602081830303815290604052805190602001208103611cb05750600c92915050565b6040516139bb60f11b6020820152602201604051602081830303815290604052805190602001208103611ce65750600d92915050565b604051616e6f60f01b6020820152602201604051602081830303815290604052805190602001208103611d1c5750600e92915050565b60405161646160f01b6020820152602201604051602081830303815290604052805190602001208103611d525750600f92915050565b60405161666960f01b6020820152602201604051602081830303815290604052805190602001208103611d885750601092915050565b604051611c1b60f21b6020820152602201604051602081830303815290604052805190602001208103611dbe5750601192915050565b604051613a3960f11b6020820152602201604051602081830303815290604052805190602001208103611df45750601292915050565b60405161195b60f21b6020820152602201604051602081830303815290604052805190602001208103611e2a5750601392915050565b60405161686560f01b6020820152602201604051602081830303815290604052805190602001208103611e605750601492915050565b604051610e8d60f31b6020820152602201604051602081830303815290604052805190602001208103611e965750601592915050565b60405161766960f01b6020820152602201604051602081830303815290604052805190602001208103611ecc5750601692915050565b604051611a5960f21b6020820152602201604051602081830303815290604052805190602001208103611f025750601792915050565b604051616d7360f01b6020820152602201604051602081830303815290604052805190602001208103611f385750601892915050565b604051611d1b60f21b6020820152602201604051602081830303815290604052805190602001208103611f6e5750601992915050565b60405161756b60f01b6020820152602201604051602081830303815290604052805190602001208103611fa45750601a92915050565b60405161637360f01b6020820152602201604051602081830303815290604052805190602001208103611fda5750601b92915050565b60405161687560f01b60208201526022016040516020818303038152906040528051906020012081036120105750601c92915050565b60405161726f60f01b60208201526022016040516020818303038152906040528051906020012081036120465750601d92915050565b60405161626760f01b602082015260220160405160208183030381529060405280519060200120810361207c5750601e92915050565b60405161343960f11b60208201526022016040516020818303038152906040528051906020012081036120b25750601f92915050565b6040516139b960f11b60208201526022016040516020818303038152906040528051906020012081036120e85750602092915050565b60405161736b60f01b602082015260220160405160208183030381529060405280519060200120810361211e5750602192915050565b604051611cdb60f21b60208201526022016040516020818303038152906040528051906020012081036121545750602292915050565b604051611b1d60f21b602082015260220160405160208183030381529060405280519060200120810361218a5750602392915050565b60405161363b60f11b60208201526022016040516020818303038152906040528051906020012081036121c05750602492915050565b60405161195d60f21b60208201526022016040516020818303038152906040528051906020012081036121f65750602592915050565b5060ff92915050565b336000908152600260208190526040909120015460ff166122325760405162461bcd60e51b8152600401610a9590613440565b33600090815260026020526040902060010155565b6007602052816000526040600020818154811061226357600080fd5b90600052602060002001600091509150505481565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146122e05760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606401610a95565b50565b6001600160a01b038116600090815260056020526040902060090154819060ff166123455760405162461bcd60e51b815260206004820152601260248201527153657373696f6e206e6f742061637469766560701b6044820152606401610a95565b6001600160a01b038281166000908152600560205260409020541633148061238957506001600160a01b038281166000908152600560205260409020600101541633145b806123bc5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61241b5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c6572206973206e6f74207468652073747564656e742c207475746f72604482015269103737b91037bbb732b960b11b6064820152608401610a95565b6001600160a01b038216600090815260056020526040812060038101549091906124459042613500565b9050600082600501548261245991906135a3565b83546001600160a01b0390811660009081526001602090815260408083206002890154909416835292905290812054919250818311612498578261249a565b815b85546001600160a01b03908116600090815260016020908152604080832060028b01549094168352929052908120805492935083929091906124dd908490613500565b90915550506002850154600186015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af115801561253b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255f91906134af565b50808560060160008282546125749190613574565b909155505042600486015560018501546001600160a01b03166000908152600360205260408120600281018054919284926125b0908490613574565b90915550506003810180549060006125c7836134e7565b919050555060008660090160006101000a81548160ff0219169083151502179055508560066000886008015481526020019081526020016000206000820160009054906101000a90046001600160a01b03168160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001820160009054906101000a90046001600160a01b03168160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002820160009054906101000a90046001600160a01b03168160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600382015481600301556004820154816004015560058201548160050155600682015481600601556007820160009054906101000a900460ff168160070160006101000a81548160ff021916908360ff160217905550600882015481600801556009820160009054906101000a900460ff168160090160006101000a81548160ff0219169083151502179055509050508560010160009054906101000a90046001600160a01b03166001600160a01b031686600801547f1f566c0c31d295290bb19b5162e239dbdeeb51107556dd0c39b1a86a303ed39387856040516127b1929190918252602082015260400190565b60405180910390a3505092546001600160a01b039081166000908152600460208181526040808420805460ff1990811690915599909416835260059081905292822080546001600160a01b031990811682556001820180548216905560028201805490911690556003810183905590810182905591820181905560068201819055600782018054881690556008820155600901805490951690945550505050565b606060ff821661287a57505060408051808201909152600281526132b760f11b602082015290565b60001960ff8316016128a4575050604080518082019091526002815261657360f01b602082015290565b60011960ff8316016128ce575050604080518082019091526002815261333960f11b602082015290565b60021960ff8316016128f8575050604080518082019091526002815261646560f01b602082015290565b60031960ff8316016129225750506040805180820190915260028152611a5d60f21b602082015290565b60041960ff83160161294c5750506040805180820190915260028152611c1d60f21b602082015290565b60051960ff831601612976575050604080518082019091526002815261727560f01b602082015290565b60061960ff8316016129a05750506040805180820190915260028152610f4d60f31b602082015290565b60071960ff8316016129ca5750506040805180820190915260028152616a6160f01b602082015290565b60081960ff8316016129f45750506040805180820190915260028152616b6f60f01b602082015290565b60091960ff831601612a1e57505060408051808201909152600281526130b960f11b602082015290565b600a1960ff831601612a48575050604080518082019091526002815261686960f01b602082015290565b600b1960ff831601612a725750506040805180820190915260028152611b9b60f21b602082015290565b600c1960ff831601612a9c57505060408051808201909152600281526139bb60f11b602082015290565b600d1960ff831601612ac65750506040805180820190915260028152616e6f60f01b602082015290565b600e1960ff831601612af0575050604080518082019091526002815261646160f01b602082015290565b600f1960ff831601612b1a575050604080518082019091526002815261666960f01b602082015290565b60101960ff831601612b445750506040805180820190915260028152611c1b60f21b602082015290565b60111960ff831601612b6e5750506040805180820190915260028152613a3960f11b602082015290565b60121960ff831601612b98575050604080518082019091526002815261195b60f21b602082015290565b60131960ff831601612bc2575050604080518082019091526002815261686560f01b602082015290565b60141960ff831601612bec5750506040805180820190915260028152610e8d60f31b602082015290565b60151960ff831601612c16575050604080518082019091526002815261766960f01b602082015290565b60161960ff831601612c405750506040805180820190915260028152611a5960f21b602082015290565b60171960ff831601612c6a5750506040805180820190915260028152616d7360f01b602082015290565b60181960ff831601612c945750506040805180820190915260028152611d1b60f21b602082015290565b60191960ff831601612cbe575050604080518082019091526002815261756b60f01b602082015290565b601a1960ff831601612ce8575050604080518082019091526002815261637360f01b602082015290565b601b1960ff831601612d12575050604080518082019091526002815261687560f01b602082015290565b601c1960ff831601612d3c575050604080518082019091526002815261726f60f01b602082015290565b601d1960ff831601612d66575050604080518082019091526002815261626760f01b602082015290565b601e1960ff831601612d90575050604080518082019091526002815261343960f11b602082015290565b601f1960ff831601612dba57505060408051808201909152600281526139b960f11b602082015290565b60201960ff831601612de4575050604080518082019091526002815261736b60f01b602082015290565b60211960ff831601612e0e5750506040805180820190915260028152611cdb60f21b602082015290565b60221960ff831601612e385750506040805180820190915260028152611b1d60f21b602082015290565b60231960ff831601612e62575050604080518082019091526002815261363b60f11b602082015290565b60241960ff831601612e8c575050604080518082019091526002815261195d60f21b602082015290565b505060408051808201909152600b81526a1d5b9cdd5c1c1bdc9d195960aa1b602082015290565b6001600160a01b0382811660009081526002602090815260408083205493851683526003825280832060ff9094168084526001909401909152812054909190612efe610258826135a3565b6001600160a01b038616600090815260016020908152604080832073cac524bca292aaade2df8a05cc58f0a65b1b3bb9845290915290205410159250505092915050565b600081815260066020818152604080842081516101408101835281546001600160a01b03908116825260018301548116948201949094526002820154909316918301919091526003810154606083015260048101546080830152600581015460a08301529182015460c0820152600782015460ff90811660e08301526008830154610100830152600990920154909116151561012082018190526130205760405162461bcd60e51b815260206004820152601560248201527453657373696f6e206973206e6f742061637469766560581b6044820152606401610a95565b60008160600151426130329190613500565b90508160a001518161304491906135a3565b949350505050565b80356001600160a01b038116811461306357600080fd5b919050565b6000806040838503121561307b57600080fd5b6130848361304c565b91506130926020840161304c565b90509250929050565b803560ff8116811461306357600080fd5b600080604083850312156130bf57600080fd5b6130c88361309b565b946020939093013593505050565b600080604083850312156130e957600080fd5b6130f28361304c565b91506130926020840161309b565b60006020828403121561311257600080fd5b5035919050565b60006020828403121561312b57600080fd5b6131348261304c565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101561317357835183529284019291840191600101613157565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156131be576131be61317f565b604052919050565b600080604083850312156131d957600080fd5b823567ffffffffffffffff808211156131f157600080fd5b818501915085601f83011261320557600080fd5b81356020828211156132195761321961317f565b8160051b925061322a818401613195565b828152928401810192818101908985111561324457600080fd5b948201945b848610156132695761325a8661309b565b82529482019490820190613249565b9997909101359750505050505050565b81516001600160a01b03168152610140810160208301516132a560208401826001600160a01b03169052565b5060408301516132c060408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e08301516132fd60e084018260ff169052565b506101008381015190830152610120928301511515929091019190915290565b6000602080838503121561333057600080fd5b823567ffffffffffffffff8082111561334857600080fd5b818501915085601f83011261335c57600080fd5b81358181111561336e5761336e61317f565b613380601f8201601f19168501613195565b9150808252868482850101111561339657600080fd5b8084840185840137600090820190930192909252509392505050565b600080604083850312156133c557600080fd5b6130c88361304c565b6000602082840312156133e057600080fd5b6131348261309b565b60005b838110156134045781810151838201526020016133ec565b50506000910152565b602081526000825180602084015261342c8160408501602087016133e9565b601f01601f19169190910160400192915050565b602080825260139082015272155cd95c881b9bdd081c9959da5cdd195c9959606a1b604082015260600190565b60208082526022908201527f5475746f7220646f6573206e6f74206f666665722074686973206c616e677561604082015261676560f01b606082015260800190565b6000602082840312156134c157600080fd5b8151801515811461313457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134f9576134f96134d1565b5060010190565b8181038181111561126b5761126b6134d1565b634e487b7160e01b600052603260045260246000fd5b604080825283519082018190526000906020906060840190828701845b8281101561356557815160ff1684529284019290840190600101613546565b50505092019290925292915050565b8082018082111561126b5761126b6134d1565b600082516135998184602087016133e9565b9190910192915050565b808202811582820484141761126b5761126b6134d156fea264697066735822122075bec61b23912de2d4261ed64e5409dfb1d2089375f7dce009e2ac315d2d640864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canAffordRate(address,address)": {
        "params": {
          "_studentAddress": "Address of the student",
          "_tutorAddress": "Address of the tutor"
        },
        "returns": {
          "_0": "True if student can afford tutor's rate"
        }
      },
      "depositFunds(uint256)": {
        "params": {
          "_amount": "Amount of PYUSD tokens to deposit"
        }
      },
      "emergencyEndSession(uint256)": {
        "params": {
          "_sessionId": "ID of the session to end"
        }
      },
      "endSession(address)": {
        "details": "The backend will end the call if heartbeat signal is not received possibly due to disconnection from the call",
        "params": {
          "tutorAddress": "Tutor address of the session to end"
        }
      },
      "getCurrentSessionCost(uint256)": {
        "params": {
          "_sessionId": "ID of the active session"
        },
        "returns": {
          "_0": "Current total cost in wei"
        }
      },
      "getSession(uint256)": {
        "params": {
          "_sessionId": "ID of the session"
        },
        "returns": {
          "_0": "Session struct with all details"
        }
      },
      "getStudentPYUSDBalance(address)": {
        "params": {
          "_student": "Address of the student"
        },
        "returns": {
          "_0": "PYUSD balance"
        }
      },
      "getUserSessions(address)": {
        "params": {
          "_userAddress": "Address of the user"
        },
        "returns": {
          "_0": "Array of session IDs"
        }
      },
      "hasSufficientBalance(address,address)": {
        "params": {
          "_studentAddress": "Address of the user",
          "_tutorAddress": "Address of the tutor"
        },
        "returns": {
          "_0": "True if user has sufficient PYUSD balance"
        }
      },
      "isoToLanguage(string)": {
        "params": {
          "_isoCode": "ISO 639-1 language code (e.g., \"en\", \"es\")"
        },
        "returns": {
          "_0": "Language ID (uint8)"
        }
      },
      "languageToIso(uint8)": {
        "params": {
          "_language": "Language ID (uint8)"
        },
        "returns": {
          "_0": "ISO 639-1 language code string"
        }
      },
      "registerStudent(uint8,uint256)": {
        "params": {
          "_budgetPerSec": "Budget per second the student is willing to spend",
          "_targetLanguage": "Target language the student wants to learn"
        }
      },
      "registerTutor(uint8[],uint256)": {
        "params": {
          "_languages": "Array of languages the user can teach/learn",
          "_ratePerSecond": "Rate per hour (will be converted to per-second internally)"
        }
      },
      "startSession(address,uint8)": {
        "details": "The student is submitting a transaction to accept the call from the tutor to start the session",
        "params": {
          "_language": "Language being taught/learned",
          "_tutorAddress": "Address of the tutor"
        },
        "returns": {
          "_0": "sessionId The ID of the created session"
        }
      },
      "updateBudget(uint256)": {
        "params": {
          "_budgetPerSec": "Student budget per second"
        }
      },
      "updateRate(uint8,uint256)": {
        "params": {
          "_ratePerSecond": "New rate per hour"
        }
      },
      "withdrawFunds(uint256)": {
        "params": {
          "_amount": "Amount of PYUSD tokens to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canAffordRate(address,address)": {
        "notice": "Check if student can afford tutor's rate"
      },
      "depositFunds(uint256)": {
        "notice": "Deposit PYUSD funds into the contract"
      },
      "emergencyEndSession(uint256)": {
        "notice": "Emergency function to end any session (only owner)"
      },
      "endSession(address)": {
        "notice": "End an active sessionThe session will be ended by the student or tutor hanging up the call or the owner ending the session"
      },
      "getCurrentSessionCost(uint256)": {
        "notice": "Calculate current session cost"
      },
      "getSession(uint256)": {
        "notice": "Get session details"
      },
      "getStudentPYUSDBalance(address)": {
        "notice": "Get student's PYUSD balance"
      },
      "getTutorLanguage(address,uint8)": {
        "notice": "Getter functions for tutor data"
      },
      "getUserSessions(address)": {
        "notice": "Get user's session history"
      },
      "hasSufficientBalance(address,address)": {
        "notice": "Check if user has sufficient PYUSD balance for session"
      },
      "isoToLanguage(string)": {
        "notice": "Convert ISO 639-1 language code to language ID"
      },
      "languageToIso(uint8)": {
        "notice": "Convert language ID to ISO 639-1 language code"
      },
      "registerStudent(uint8,uint256)": {
        "notice": "Register a new student"
      },
      "registerTutor(uint8[],uint256)": {
        "notice": "Register a tutor"
      },
      "startSession(address,uint8)": {
        "notice": "Start a new session between student and tutorThe student has accepted the call from the tutor and the session is starting"
      },
      "updateBudget(uint256)": {
        "notice": "Update student's budget"
      },
      "updateRate(uint8,uint256)": {
        "notice": "Update user's rate"
      },
      "withdraw()": {
        "notice": "Withdraw contract balance (only owner)"
      },
      "withdrawFunds(uint256)": {
        "notice": "Withdraw PYUSD funds from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1005,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "sessionCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1011,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "studentBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1016,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "students",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Student)965_storage)"
      },
      {
        "astId": 1021,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "tutors",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Tutor)980_storage)"
      },
      {
        "astId": 1025,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "isStudying",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1030,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "activeSessions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Session)1001_storage)"
      },
      {
        "astId": 1035,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "sessionHistory",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Session)1001_storage)"
      },
      {
        "astId": 1040,
        "contract": "contracts/LangDAO.sol:LangDAO",
        "label": "userSessions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Session)1001_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LangDAO.Session)",
        "numberOfBytes": "32",
        "value": "t_struct(Session)1001_storage"
      },
      "t_mapping(t_address,t_struct(Student)965_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LangDAO.Student)",
        "numberOfBytes": "32",
        "value": "t_struct(Student)965_storage"
      },
      "t_mapping(t_address,t_struct(Tutor)980_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LangDAO.Tutor)",
        "numberOfBytes": "32",
        "value": "t_struct(Tutor)980_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Session)1001_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LangDAO.Session)",
        "numberOfBytes": "32",
        "value": "t_struct(Session)1001_storage"
      },
      "t_mapping(t_uint8,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Session)1001_storage": {
        "encoding": "inplace",
        "label": "struct LangDAO.Session",
        "members": [
          {
            "astId": 982,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "student",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 984,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "tutor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 986,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 988,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 990,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 992,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "ratePerSecond",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 994,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "totalPaid",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 996,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "language",
            "offset": 0,
            "slot": "7",
            "type": "t_uint8"
          },
          {
            "astId": 998,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "id",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1000,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "isActive",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Student)965_storage": {
        "encoding": "inplace",
        "label": "struct LangDAO.Student",
        "members": [
          {
            "astId": 960,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "targetLanguage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 962,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "budgetPerSec",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 964,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "isRegistered",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Tutor)980_storage": {
        "encoding": "inplace",
        "label": "struct LangDAO.Tutor",
        "members": [
          {
            "astId": 969,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "languages",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint8,t_bool)"
          },
          {
            "astId": 973,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "rateForLanguage",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint8,t_uint256)"
          },
          {
            "astId": 975,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "totalEarnings",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 977,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "sessionCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 979,
            "contract": "contracts/LangDAO.sol:LangDAO",
            "label": "isRegistered",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
