{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LangDAO","text":"<p>Mission: Helping people worldwide use their language skills to learn, teach, and earn crypto in Web3.</p> <ul> <li>\ud83c\udf0d Global by design \u2014 LatAm as the first test region</li> <li>\ud83e\udde9 Core integrations: Huddle01 (live sessions), POAP (credentials), Superfluid/Sablier (streaming payments)</li> <li>\ud83c\udfaf Focus: Skill-based onboarding, community learning, and fair incentives</li> </ul> <p>\u27a1 Start here:</p> <ul> <li>What we\u2019re building: Product Overview</li> <li>What ships for the hackathon: MVP Scope</li> <li>How it works under the hood: Architecture</li> <li>Why LatAm first: Testbed rationale</li> </ul>"},{"location":"adr/0001-huddle01/","title":"ADR-0001: Choose Huddle01 for Live Sessions","text":""},{"location":"adr/0001-huddle01/#context","title":"Context","text":"<p>We need decentralized, wallet-aware live sessions that feel native to Web3.</p>"},{"location":"adr/0001-huddle01/#decision","title":"Decision","text":"<p>Adopt Huddle01 as the video layer for MVP.</p>"},{"location":"adr/0001-huddle01/#rationale","title":"Rationale","text":"<ul> <li>Low-latency P2P; wallet-friendly</li> <li>Token gating possible</li> </ul>"},{"location":"adr/0001-huddle01/#consequences","title":"Consequences","text":"<ul> <li>Faster MVP; simpler infra</li> <li>Future: evaluate recording, moderation, scale limits</li> </ul>"},{"location":"product/overview/","title":"Product Overview","text":"<p>LangDAO is a community platform where people use their language and communication skills to teach, guide, translate, and onboard others into Web3 \u2014 and earn crypto for real contribution.</p>"},{"location":"product/overview/#problem","title":"Problem","text":"<ul> <li>Web3 adoption needs human onboarding (live guidance, local language support).</li> <li>Language access is uneven; incentives for helpers are weak or ad hoc.</li> </ul>"},{"location":"product/overview/#solution","title":"Solution","text":"<ul> <li>Live sessions (Huddle01) and token-gated rooms via wallet.</li> <li>Proof of participation/skill using POAP or lightweight credential NFTs.</li> <li>Micro-rewards for verified tasks: teaching, moderating, translating, or guiding.</li> </ul>"},{"location":"product/overview/#initial-users","title":"Initial Users","text":"<ul> <li>Spanish speakers (teachers/mentors) in LatAm, and global learners seeking human guidance.</li> </ul>"},{"location":"product/overview/#value","title":"Value","text":"<ul> <li>Learners: trusted, human help.</li> <li>Contributors: income + credentials + reputation.</li> <li>Ecosystem: scalable, community-driven onboarding.</li> </ul>"},{"location":"product/roadmap/","title":"Roadmap","text":""},{"location":"product/roadmap/#m1-hackathon","title":"M1 \u2014 Hackathon","text":"<ul> <li>Live session flow (Huddle01) + POAP mint + streaming payment</li> <li>Simple schedule or roulette-style + wallet join</li> <li>Mentor feedback captured in repo issues</li> </ul>"},{"location":"product/roadmap/#m2-pilot-latam","title":"M2 \u2014 Pilot (LatAm)","text":"<ul> <li>DAO-curated instructors + repeat sessions</li> <li>Basic rewards model; payout ops</li> <li>Early partnerships (community groups)</li> </ul>"},{"location":"product/roadmap/#m3-scale","title":"M3 \u2014 Scale","text":"<ul> <li>Multi-language support</li> <li>Contributor reputation &amp; credentials</li> <li>Grants/partners for regional rollouts</li> </ul>"},{"location":"product/scope-mvp/","title":"MVP Scope (Hackathon)","text":""},{"location":"product/scope-mvp/#goal","title":"Goal","text":"<p>Deliver a clickable + minimally on-chain path that proves the core loop: Join session \u2192 complete session \u2192 mint credential \u2192 get paid.</p>"},{"location":"product/scope-mvp/#scope","title":"Scope","text":"<ul> <li>Auth: connect wallet (no complex profiles).</li> <li>Session: join a Huddle01 room from a simple schedule link.</li> <li>Proof: mint a POAP (or test credential NFT) upon completion.</li> <li>Payment: display mock reward or testnet payout claim.</li> </ul>"},{"location":"product/scope-mvp/#descope-post-hack","title":"Descope (post-hack)","text":"<ul> <li>Full tokenomics</li> <li>Complex reputation graphs</li> <li>Multi-language orchestration</li> </ul>"},{"location":"product/scope-mvp/#success-signals","title":"Success Signals","text":"<ul> <li>\u2265 1 working live session</li> <li>\u2265 10 successful POAP mints</li> <li>\u2265 5 mentor validations/notes captured</li> </ul>"},{"location":"product/testbed-latam/","title":"Testbed: Latin America","text":""},{"location":"product/testbed-latam/#why-latam-first","title":"Why LatAm first","text":"<ul> <li>High Spanish/Portuguese language density</li> <li>Strong student demand from North America</li> <li>Remittance culture + mobile-first adoption</li> </ul>"},{"location":"product/testbed-latam/#risks-mitigations","title":"Risks &amp; Mitigations","text":"<ul> <li>Payments/ramps: start testnet + stablecoins; explore local partners.</li> <li>Connectivity: mobile-friendly flows; low-bandwidth options.</li> <li>Trust: verifiable credentials; community moderation.</li> </ul>"},{"location":"product/testbed-latam/#success-criteria","title":"Success Criteria","text":"<ul> <li>Repeat instructors</li> <li>Session completion &amp; credential claims</li> <li>Community partnerships formed</li> </ul>"},{"location":"research/assumptions/","title":"Research Assumptions","text":"<ul> <li>People with language skills will teach/guide if incentives are clear.</li> <li>Learners prefer verified, human-led onboarding for first steps.</li> <li>LatAm communities can seed initial supply/demand efficiently.</li> </ul>"},{"location":"research/assumptions/#open-questions","title":"Open Questions","text":"<ul> <li>Optimal reward size/frequency?</li> <li>Best verification flow to prevent abuse?</li> <li>Most effective community channels for growth?</li> </ul>"},{"location":"tech/architecture/","title":"Architecture (MVP)","text":"<p>This MVP lets a Tutor go online with a per-minute/per-second rate, and a Student:</p> <ul> <li>match via roulette or booking</li> <li>pay only for time in call</li> <li>get auto call cutoff when balance ends or either side disconnects</li> <li>receive POAP/credential (optional)</li> <li>rate the tutor and track progress</li> </ul> <p>We minimize contracts to what\u2019s essential for time-billed calls and auto-stop.</p>"},{"location":"tech/architecture/#high-level-components","title":"High-level Components","text":"<pre><code>graph TD\n  subgraph \"Client\"\n    S[\"Student dApp - NextJS\"]:::box\n    T[\"Tutor dApp - NextJS\"]:::box\n    W[\"WalletConnect\"]:::box\n  end\n\n  subgraph \"Realtime\"\n    H[\"Huddle01 WebRTC Rooms\"]:::svc\n  end\n\n  subgraph \"Off-chain Services\"\n    MM[\"Matchmaker API - Roulette &amp; Booking\"]:::svc\n    HB[\"Heartbeat Service - 5s signed pings\"]:::svc\n    RL[\"Relayer Bot - authorized\"]:::svc\n    NF[\"Notifications &amp; Calendar\"]:::svc\n  end\n\n  subgraph \"On-chain / Protocol\"\n    CTRL[\"Payment Controller - Flow Operator\"]:::chain\n    STR[\"Streaming Protocol - Superfluid or Sablier\"]:::chain\n    CRED[\"Credentials - POAP or SBT\"]:::chain\n    RAT[\"Ratings (IPFS + on-chain hash)\"]:::chain\n    DAO[\"DAO Multisig + Snapshot\"]:::chain\n  end\n\n  S --&gt;|auth| W\n  T --&gt;|auth| W\n  S --&gt; MM\n  T --&gt; MM\n  MM --&gt; H\n  S --&gt;|join| H\n  T --&gt;|join| H\n\n  S --&gt; HB\n  T --&gt; HB\n  H --&gt; HB\n  HB --&gt; RL\n  RL --&gt; CTRL\n  CTRL --&gt;|create/update/delete flow| STR\n\n  S --&gt;|grant operator + top-ups| CTRL\n  STR --&gt;|real-time stream| T\n\n  S --&gt; CRED\n  T --&gt; CRED\n  S --&gt; RAT\n  T --&gt; RAT\n  DAO --&gt; CRED\n\n  classDef box fill:#0b5fff0d,stroke:#0b5fff,stroke-width:1px,color:#0b2540;\n  classDef svc fill:#ffd50014,stroke:#d4a000,stroke-width:1px,color:#5a4500;\n  classDef chain fill:#00a36b14,stroke:#008a59,stroke-width:1px,color:#0b3b2c;</code></pre>"},{"location":"tech/architecture/#reading-notes","title":"Reading notes","text":"<ul> <li>Matchmaker handles roulette/booking, then hands off to Huddle01 for the live session.</li> <li>Heartbeat watches WebRTC + pings; Relayer \u2192 Controller deletes the stream on drop.</li> <li>Controller is pre-authorized by the student (flow operator) to manage their stream non-interactively.</li> <li>Top-ups go from Student \u2192 Controller/Protocol; funds stream to Tutor in real time.</li> <li>Credentials (POAP/SBT) and Ratings form the reputation layer; DAO issues SBTs via Snapshot + Multisig.</li> </ul>"},{"location":"tech/architecture/#component-1-session-escrow-time-billed-calls","title":"Component 1: Session Escrow (time-billed calls)","text":"<p>Goal: pay the tutor only for time in call; auto-stop on cap/disconnect.</p> <pre><code>stateDiagram-v2\n  [*] --&gt; Idle\n\n  Idle --&gt; Funded: deposit(cap, rate)&lt;br&gt;(by Student)\n  Funded --&gt; Active: startSession()&lt;br&gt;(both joined)\n\n  Active --&gt; Stopping: cap reached&lt;br&gt;(or Student ends)\n  Active --&gt; Stopping: disconnect detected&lt;br&gt;(heartbeat/webRTC)\n  Active --&gt; Stopping: tutor ends\n\n  Stopping --&gt; Settled: settle owed = min(elapsed, cap) * rate\n  Settled --&gt; Refunded: refund remainder (cap - elapsed)*rate\n  Refunded --&gt; Closed</code></pre>"},{"location":"tech/architecture/#what-this-component-does-and-only-this","title":"What this component does (and only this)","text":"<ul> <li>deposit(cap, rate): Student pre-funds max spend \u2192 moves to Funded.</li> <li>startSession(): Called once both are in the room \u2192 moves to Active.</li> <li>elapsed accounting: measured inside contract (block timestamps) or a \u201cmeter\u201d submodule.</li> <li>stop triggers:</li> <li>cap reached,</li> <li>disconnect (from heartbeat/webRTC signal relayed on-chain),</li> <li>either party ends.</li> <li>settle(): pay tutor min(elapsed, cap) \u00d7 rate, refund remainder to student.</li> <li>no overpaying, no post-drop leakage by construction.</li> </ul>"},{"location":"tech/architecture/#caveats","title":"Caveats","text":"<p>What if the user wishes to keep the current session running longer than his deposit allows? Could be a UX bug.</p>"},{"location":"tech/architecture/#component-2-heartbeat-auto-stop","title":"Component 2: Heartbeat &amp; Auto-Stop","text":"<p>Purpose: guarantee that if either peer drops from a Huddle01 call, billing halts instantly.</p>"},{"location":"tech/architecture/#concept","title":"Concept","text":"<p>Each participant\u2019s client emits a signed \u201cI\u2019m still here\u201d ping every N seconds to a lightweight service. If either side fails to send two consecutive heartbeats (\u2248 10 s of silence), the service calls the on-chain <code>stopSession()</code> via a relayer.</p> <pre><code>sequenceDiagram\n  autonumber\n  participant Student as Student Client\n  participant Tutor as Tutor Client\n  participant Huddle as Huddle01 (WebRTC)\n  participant Heartbeat as Heartbeat Service\n  participant Relayer as Relayer Bot\n  participant Controller as Payment Controller\n  participant Stream as Streaming Protocol\n\n  %% Start of call (elsewhere: Matchmaker + Controller.startSession)\n  Student-&gt;&gt;Huddle: join()\n  Tutor-&gt;&gt;Huddle: join()\n\n  %% Periodic liveness pings\n  loop every 5s\n    Student-&gt;&gt;Heartbeat: POST /ping {sessionId, sig}\n    Tutor-&gt;&gt;Heartbeat: POST /ping {sessionId, sig}\n  end\n\n  Note over Heartbeat: tracks lastPing for both peers\n\n  %% Disconnect from Huddle or missing pings\n  Huddle--&gt;&gt;Heartbeat: peer-left / connectionState=failed\n  Heartbeat-&gt;&gt;Heartbeat: OR detect missing ping &gt; 10s\n\n  alt disconnect or missing ping\n    Heartbeat--&gt;&gt;Relayer: emit \"disconnect(sessionId)\"\n    Relayer-&gt;&gt;Controller: stopSession(sessionId)\n    Controller-&gt;&gt;Stream: deleteFlow(student -&gt; tutor)\n    Note over Controller,Stream: Stream deleted \u2192 payment stops instantly\n  end</code></pre>"},{"location":"tech/architecture/#key-changes","title":"Key changes","text":"<ul> <li>Heartbeat no longer calls escrow; it instructs the Controller to delete the live stream (Superfluid/Sablier) so billing halts immediately.</li> <li>The note is placed inside a valid branch to avoid Mermaid parse errors.</li> </ul>"},{"location":"tech/architecture/#behavior-summary","title":"Behavior Summary","text":"Event Trigger Action \u2705 Normal pings both clients responding nothing changes \u26a0\ufe0f One peer silent &gt; 10 s network loss/closed tab Heartbeat \u2192 Relayer \u2192 stopSession() Stop Acknowledgement Escrow settles tutor payout + student refund issued"},{"location":"tech/architecture/#implementation-notes","title":"Implementation notes","text":"<ul> <li>Ping = small JSON {sessionId, walletAddr, signature}.</li> <li>Verification = HMAC / signature ensures no spoofing.</li> <li>Relayer = can be Biconomy, Gelato, OZ Defender or simple script with funded key.</li> <li>Timeout tunable (5 s, 10 s, 15 s).</li> <li>Logs feed optional analytics (\u201caverage disconnect time\u201d).</li> </ul>"},{"location":"tech/architecture/#component-3a-matchmaker-roulette-find-tutor-now","title":"Component 3A \u2014 Matchmaker (Roulette \u201cfind tutor now\u201d)","text":"<p>Purpose: pair a student with an available, matching tutor quickly, confirm the rate/cap, and hand off to escrow \u2192 call.</p>"},{"location":"tech/architecture/#assumptions","title":"Assumptions","text":"<ul> <li>Student specifies filters: language, level, max rate, credential (optional SBT).</li> <li>Tutor sets availability + per-second/minute rate and optional credentials.</li> <li>We pre-check student balance/cap before proposing.</li> </ul> <pre><code>sequenceDiagram\n  autonumber\n  participant Student as Student dApp\n  participant MM as Matchmaker API\n  participant Tutor as Tutor dApp\n  participant Wallet as Wallet/Balance\n  participant Escrow as Escrow Contract\n  participant Huddle as Huddle01\n\n  Student-&gt;&gt;Wallet: read balance / max spend cap\n  Student-&gt;&gt;MM: findNow({lang, level, maxRate, credReq, cap})\n  MM-&gt;&gt;MM: filter tutors: online \u2227 rate&lt;=maxRate \u2227 cred ok\n  alt no tutors\n    MM--&gt;&gt;Student: none available \u2192 suggest booking/waitlist\n    Note over Student,MM: END (no match)\n  else candidates exist\n    MM-&gt;&gt;Tutor: proposal({rate, estCap, filters}) (30s ttl)\n    alt tutor accepts\n      Tutor--&gt;&gt;MM: accept\n      MM-&gt;&gt;Huddle: create room token (ephemeral)\n      MM--&gt;&gt;Student: matchFound({tutor, rate, roomToken, cap})\n      Student-&gt;&gt;Escrow: deposit(cap), startSessionIntent(rate,tutor)\n      alt deposit OK\n        Escrow--&gt;&gt;Student: sessionId\n        Student-&gt;&gt;Huddle: join(roomToken)\n        Tutor-&gt;&gt;Huddle: join(roomToken)\n        Note over Student,Tutor: handoff to Heartbeat + Escrow component\n      else deposit fails / too low\n        Escrow--&gt;&gt;Student: insufficient funds\n        MM--&gt;&gt;Student: retry / reduce cap\n      end\n    else tutor times out / declines\n      Tutor--&gt;&gt;MM: decline/timeout\n      MM-&gt;&gt;MM: try next candidate (max N attempts)\n      MM--&gt;&gt;Student: (optional) still matching\u2026 spinner\n    end\n  end</code></pre>"},{"location":"tech/architecture/#behavior","title":"Behavior","text":"<ul> <li>Filter \u2192 Propose \u2192 Accept loop with short TTL to keep UX snappy.</li> <li>Balance &amp; cap pre-check avoids proposing rates the student can\u2019t afford.</li> <li>Rate lock at acceptance (for the session intent), so no last-second changes.</li> <li>On accept, we create room, then require escrow deposit before join.</li> <li>If escrow fails, offer retry or reduce cap; the tutor can be auto-released.</li> </ul>"},{"location":"tech/architecture/#edge-cases-timeouts","title":"Edge cases &amp; timeouts","text":"<ul> <li>No tutors \u2192 offer booking or waitlist ping.</li> <li>Tutor non-response \u2192 retry next (max N attempts, e.g., 3).</li> <li>Race conditions (two students propose same tutor): first valid accept wins; others get retry.</li> </ul>"},{"location":"tech/architecture/#component-3b-matchmaker-booking-flow","title":"Component 3B \u2014 Matchmaker (Booking Flow)","text":"<p>Purpose: let students book tutors in advance, ensure both confirm, and automatically trigger the escrow + call flow at the appointment time.</p> <pre><code>sequenceDiagram\n  autonumber\n  participant Student as Student dApp\n  participant MM as Matchmaker API\n  participant Tutor as Tutor dApp\n  participant Cal as Calendar / Scheduler\n  participant Escrow as Escrow Contract\n  participant Huddle as Huddle01\n  participant Notif as Notification Service\n\n  Student-&gt;&gt;MM: requestBooking({tutorId, dateTime, duration, rateCap})\n  MM-&gt;&gt;Tutor: proposeSlot({dateTime, duration, rateCap})\n  alt tutor accepts\n    Tutor--&gt;&gt;MM: accept\n    MM-&gt;&gt;Cal: createEvent({student, tutor, time, duration})\n    Cal--&gt;&gt;MM: eventId\n    MM-&gt;&gt;Notif: sendConfirmation(emails/push to both)\n    Notif--&gt;&gt;Student: booking confirmed\n    Notif--&gt;&gt;Tutor: booking confirmed\n  else tutor declines\n    Tutor--&gt;&gt;MM: decline\n    MM--&gt;&gt;Student: suggest new slot / other tutors\n    Note over MM: END (no booking)\n  end\n\n  %% Day-of-Session automation\n  Notif-&gt;&gt;Student: reminder T-30 min\n  Notif-&gt;&gt;Tutor: reminder T-30 min\n  Cal-&gt;&gt;MM: trigger start window (T-5 min)\n\n  MM-&gt;&gt;Huddle: createRoomToken(eventId)\n  MM-&gt;&gt;Escrow: preAuthSession({student,tutor,rate,durationCap})\n  Escrow--&gt;&gt;MM: sessionIntent ok\n  MM--&gt;&gt;Student: joinLink + depositPrompt\n  Student-&gt;&gt;Escrow: deposit(cap)\n  Student-&gt;&gt;Huddle: join(roomToken)\n  Tutor-&gt;&gt;Huddle: join(roomToken)\n\n  Note over Huddle: handoff \u2192 Heartbeat &amp; Escrow components</code></pre>"},{"location":"tech/architecture/#behavior-summary_1","title":"Behavior Summary","text":"Phase Who Action Proposal Student -&gt; Tutor request slot (date, duration, rateCap) Confirmation Tutor accept/decline \u2192 calendar entry Reminders Notification service 30 min &amp; 5 min pre-session Pre-fund Student deposits cap before start Session Start System opens Huddle room + Escrow intent Live Call Both proceeds under Heartbeat + Auto-Stop rules"},{"location":"tech/architecture/#key-properties","title":"Key Properties","text":"<ul> <li>Double opt-in: prevents ghost bookings.</li> <li>Pre-authorization: ensures funds exist before the room opens.</li> <li>Automation: Cal/Notif triggers prevent manual coordination.</li> <li>Handoff: identical to roulette after join \u2192 no duplicate logic.</li> </ul>"},{"location":"tech/architecture/#component-4-credentials-ratings","title":"Component 4 \u2014 Credentials &amp; Ratings","text":"<p>Purpose: after every session, issue a verifiable proof of participation and update both participants\u2019 reputations. for vetted tutors, issue a Soul-Bound Token (SBT) to unlock credential-gated rooms.</p> <pre><code>sequenceDiagram\n  autonumber\n  participant Student as Student dApp\n  participant Tutor as Tutor dApp\n  participant ESC as Escrow Contract\n  participant POAP as POAP API / Mint Contract\n  participant DAO as Vetting DAO / SBT Issuer\n  participant IPFS as Ratings Storage\n\n  ESC--&gt;&gt;Student: sessionSettled(eventId)\n  Student-&gt;&gt;POAP: mintPOAP(eventId, sig)\n  POAP--&gt;&gt;Student: tokenId (POAP NFT)\n  Note over Student,POAP: proof of session = credential #1\n\n  Student-&gt;&gt;IPFS: uploadRating({tutorId, score, text})\n  IPFS--&gt;&gt;Student: cid\n  Student-&gt;&gt;ESC: recordRatingHash(cid)\n  ESC--&gt;&gt;Tutor: reputationUpdate(cid)\n\n  alt DAO vetting process\n    Tutor-&gt;&gt;DAO: applyForCredential({proofs, ratings})\n    DAO--&gt;&gt;Tutor: verify + mint SBT\n    Tutor-&gt;&gt;SBT: hold soul-bound credential\n  end</code></pre>"},{"location":"tech/architecture/#credential-types","title":"Credential Types","text":"Type Purpose Who mints Transferable Example POAP Proof of attendance / completion automatic API \u2705 Student finishes a lesson SBT (Tutor Credential) DAO-vetted qualification DAO governance \u274c \u201cCertified Spanish native speaker\u201d Rating Record Session feedback student \u2192 IPFS + hash on-chain n/a 5 stars, comment"},{"location":"tech/architecture/#logic-highlights","title":"Logic Highlights","text":"<ul> <li>Automatic POAP: triggered by sessionSettled; minimal friction.</li> <li>Reputation anchor: each rating = IPFS CID + hash on-chain \u2192 verifiable, append-only.</li> <li>DAO vetting: a DAO multisig reviews proofs/ratings \u2192 issues an SBT NFT.</li> <li>Access control: smart-contract rooms or filters check balanceOf(SBT) &gt; 0.</li> </ul>"},{"location":"tech/architecture/#component-5-dao-vetting-flow-tutor-credential-sbt","title":"Component 5 \u2014 DAO Vetting Flow (Tutor Credential SBT)","text":"<ul> <li>DAO Vetting Flow</li> </ul>"},{"location":"tech/architecture/#component-6-streaming-payments-with-dynamic-top-up","title":"Component 6 \u2014 Streaming Payments with Dynamic Top-Up","text":""},{"location":"tech/architecture/#goals","title":"Goals","text":"<ul> <li>Pay exactly per second while the call is live.</li> <li>No fixed cap; student keeps talking while funded.</li> <li>Top up during the call (adds balance; stream continues).</li> <li>Auto-stop on disconnect without needing the student\u2019s tx.</li> </ul>"},{"location":"tech/architecture/#key-pieces","title":"Key Pieces","text":"<ul> <li>Streaming protocol: Superfluid CFA (or Sablier v2 per-second).</li> <li>Controller contract: has FlowOperator perms (Superfluid) / broker role (Sablier) for the student \u2192 can start/stop/update flows.</li> <li>Heartbeat service + Relayer: listens to Huddle01 events; calls controller to stop the stream on drop.</li> <li>Top-ups: student upgrades/supplies more tokens (can be gasless via Paymaster/AA if you want).</li> </ul> <pre><code>sequenceDiagram\n  autonumber\n  participant Student as Student dApp\n  participant Controller as Controller (Flow Operator)\n  participant Stream as Streaming Protocol (e.g., Superfluid)\n  participant Heartbeat as Heartbeat Service\n  participant Relayer as Relayer Bot\n  participant Tutor as Tutor Wallet\n\n  Note over Student: One-time: grant FlowOperator perms to Controller\n\n  Student-&gt;&gt;Controller: startSession(tutor, ratePerSec)\n  Controller-&gt;&gt;Stream: createFlow(student -&gt; tutor, ratePerSec)\n  Stream--&gt;&gt;Tutor: tokens stream per-second\n  Note over Student,Stream: Student must hold/upgrade tokens as balance\n\n  par During call\n    loop Every few seconds\n      Student-&gt;&gt;Stream: topUp(amount)  %% upgrade/mint to stream balance\n      Stream--&gt;&gt;Student: balance updated\n    end\n  and Heartbeat monitoring\n      Heartbeat--&gt;&gt;Relayer: disconnect OR balance low\n      Relayer-&gt;&gt;Controller: stopSession(sessionId)\n      Controller-&gt;&gt;Stream: deleteFlow(student -&gt; tutor)\n  end\n\n  alt Student ends manually\n    Student-&gt;&gt;Controller: stopSession()\n    Controller-&gt;&gt;Stream: deleteFlow(student -&gt; tutor)\n    Note over Controller,Stream: stream deleted \u2192 payment stops instantly\n  end</code></pre>"},{"location":"tech/architecture/#behavior-summary_2","title":"Behavior Summary","text":"<ul> <li>Start: Student clicks \u201cStart Session\u201d \u2192 controller creates a per-second stream at the tutor\u2019s rate.</li> <li>During call:</li> <li>The student\u2019s streaming balance decreases; they can top up anytime (send/upgrade more tokens).</li> <li>UI shows time remaining at current balance; warns early.</li> <li>Disconnect or end: Heartbeat/RTC event \u2192 relayer calls controller \u2192 stream deleted immediately.</li> <li>Billing: Exact, continuous\u2014no settlement step needed. The tutor\u2019s wallet accrues in real time.</li> </ul>"},{"location":"tech/architecture/#why-this-meets-your-constraints","title":"Why this meets your constraints","text":"<ul> <li>No cap UX: the conversation can continue indefinitely, as long as funds remain.</li> <li>Top-up live: student can add funds mid-call (even made gasless later).</li> <li>No post-drop paying: stream is deleted by the controller when the heartbeat detects a drop\u2014no student tx needed.</li> <li>Tutor sets precise rate: store rate in tokens/sec, show per-minute in UI.</li> </ul>"},{"location":"tech/architecture/#minimal-contract-surface-pseudocode-not-solidity","title":"Minimal Contract Surface (pseudocode, not Solidity)","text":"<ul> <li>grantOperator(student \u2192 controller, maxRate) \u2014 one-time user consent.</li> <li>startSession(student, tutor, ratePerSec) \u2192 create flow (enforce ratePerSec &lt;= maxRate).</li> <li>stopSession(sessionId) \u2192 delete flow (callable by student, tutor, or relayer).</li> <li>(Optional) updateRate(newRatePerSec) during call if both sides accept.</li> </ul> <p>Superfluid specifics: student grants the Controller FlowOperator permissions (create/update/delete flows) scoped by allowances; Controller uses CFAv1 to manage the stream. Sablier v2: use a broker/mediator stream that the Controller can cancel.</p>"},{"location":"tech/architecture/#top-up-ux-notes","title":"Top-Up UX Notes","text":"<ul> <li>Warn at thresholds (e.g., 10 min, 3 min remaining at current rate).</li> <li>Provide one-click top-up (send/upgrade stablecoin) and consider a gasless paymaster.</li> <li>If balance dips below protocol buffer, pause or delete flow before liquidation.</li> </ul>"},{"location":"tech/architecture/#failure-edge-cases","title":"Failure / Edge Cases","text":"Case Outcome Student wallet runs out mid-call Stream pauses/stops; UI prompts top-up; call can continue without billing (or you auto-end call). Student hard disconnects Heartbeat \u2192 Relayer \u2192 Controller deletes stream immediately. Tutor disconnects Same path; stream stops; student not charged further. Controller down Worst case: stream continues until student manually stops; mitigate with redundant relayers/cron."},{"location":"tech/architecture/#architecture-high-level","title":"Architecture (High-Level)","text":""},{"location":"tech/architecture/#diagram","title":"Diagram","text":"<pre><code>Learner / Contributor (Wallet)\n\u2502\n\u25bc\nFrontend (Next.js / React)\n\u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2502 \u2502\n\u25bc \u25bc \u25bc\nWallet Huddle01 SDK Credential Mint\nConnect (Live Sessions) (POAP or minimal ERC-721)\n(wagmi/viem) \u2502 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Completion Signal \u2502\n\u2502\n\u25bc\nReward Reminder / Claim payment(testnet)\n</code></pre>"},{"location":"tech/architecture/#components","title":"Components","text":"<ul> <li>Frontend: Next.js + wagmi/viem for wallet connect.</li> <li>Video: Huddle01 for low-latency, wallet-aware live sessions (optionally token-gated).</li> <li>Credentials: POAP (or minimal ERC-721) as proof of completion/participation.</li> <li>Payment: Streaming payment should be terminated upon session completion</li> <li>Serverless (optional for MVP): simple scheduling/metadata endpoints if needed.</li> </ul>"},{"location":"tech/architecture/#primary-flows","title":"Primary Flows","text":"<ol> <li>Join &amp; Learn</li> <li>Connect wallet \u2192 view schedule \u2192 join live Huddle01 session.</li> <li>Verify &amp; Credential</li> <li>Host marks completion \u2192 participant mints POAP/credential.</li> <li>Reward (MVP)</li> <li>Display mock reward, tutor should receive payment</li> </ol>"},{"location":"tech/architecture/#notes-constraints","title":"Notes &amp; Constraints","text":"<ul> <li>MVP: minimize backend; prefer client-side + third-party SDKs.</li> <li>Abuse prevention (post-MVP): host attestation, time-in-session checks, or allowlist for early pilots.</li> <li>Scalability: start single language (Spanish), design flows to be language-agnostic.</li> </ul>"},{"location":"tech/architecture/#future-integrations-post-hackathon","title":"Future Integrations (Post-Hackathon)","text":"<ul> <li>Chainlink: attestations / automation for scheduled tasks.</li> <li>Reputation: simple on-chain badges \u2192 aggregated contributor profile.</li> <li>Storage: IPFS/Arweave for session metadata or recordings if needed.</li> </ul>"},{"location":"tech/dao-vetting/","title":"DAO Vetting Flow (Tutor Credential SBT)","text":"<p>Purpose: community governance verifies tutors and issues a non-transferable SBT that unlocks credential-gated rooms.</p>"},{"location":"tech/dao-vetting/#a-governance-sequence-from-application-to-sbt-mint","title":"A) Governance sequence (from application to SBT mint)","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant Tutor as Tutor\n  participant dApp as LangDAO dApp\n  participant Intake as DAO Intake API\n  participant IPFS as IPFS (evidence bundle)\n  participant Snapshot as Snapshot (off-chain vote)\n  participant Multisig as DAO Multisig\n  participant SBT as SBT Contract (non-transferable)\n\n  Tutor-&gt;&gt;dApp: Apply for credential (proofs, ratings, links)\n  dApp-&gt;&gt;Intake: submitApplication(payload)\n  Intake-&gt;&gt;IPFS: pin evidence bundle (JSON)\n  IPFS--&gt;&gt;Intake: cid\n  Intake--&gt;&gt;dApp: applicationId + cid\n\n  Intake-&gt;&gt;Snapshot: create proposal {title, cid, applicant}\n  Snapshot--&gt;&gt;Community: voting window (e.g., 3\u20135 days)\n\n  alt Quorum met &amp; majority YES\n    Snapshot--&gt;&gt;Multisig: proposal approved (payload: applicant, cid)\n    Multisig-&gt;&gt;SBT: mint(applicant, tokenURI=cid)\n    SBT--&gt;&gt;Tutor: Credential SBT minted \u2705\n  else Rejected / No quorum\n    Snapshot--&gt;&gt;dApp: status=Rejected (option: resubmit with fixes)\n    dApp--&gt;&gt;Tutor: feedback + next steps\n  end</code></pre>"},{"location":"tech/dao-vetting/#notes","title":"Notes","text":"<ul> <li>Evidence bundle: CV, language certs, prior ratings (CIDs), sample sessions.</li> <li>Snapshot: transparent voting; proposal links to CID for reviewers.</li> <li>Multisig: executes mint after approval (clear separation of \u201csignal\u201d vs \u201cexecution\u201d).</li> <li>SBT tokenURI: points to IPFS metadata (credential type, issuedAt, issuer).</li> </ul>"},{"location":"tech/dao-vetting/#b-credential-lifecycle-state-machine","title":"B) Credential lifecycle (state machine)","text":"<pre><code>stateDiagram-v2\n  [*] --&gt; Uncredentialed\n\n  Uncredentialed --&gt; VideoInterview: Submit application\n  VideoInterview --&gt; PendingReview\n  PendingReview --&gt; Approved: Vote passes + SBT minted\n  PendingReview --&gt; Rejected: Vote fails / No quorum\n\n  Approved --&gt; Active: Auto\n  Active --&gt; RevocationProposed: Misconduct/appeal opened\n  RevocationProposed --&gt; Revoked: Vote passes -&gt; burn SBT\n  RevocationProposed --&gt; Active: Vote fails / Dismissed\n\n  Rejected --&gt; Uncredentialed: Reapply after changes\n  Revoked --&gt; Uncredentialed: Reapply after cooldown (policy)</code></pre>"},{"location":"tech/dao-vetting/#policy-hooks","title":"Policy hooks","text":"<ul> <li>Cooldown after rejection/revocation (e.g., 30\u201390 days).</li> <li>Appeals = new proposal referencing prior decision CID.</li> <li>Granular credentials: multiple SBT \u201ctracks\u201d (e.g., Spanish A2, Conversation Coach, Advanced Grammar) issued independently.</li> </ul>"},{"location":"tech/dao-vetting/#c-how-rooms-enforce-credentials","title":"C) How rooms enforce credentials","text":"<ul> <li>Room configs include required credential(s) (SBT contract + tokenId range or trait).</li> <li>Join flow checks <code>SBT.balanceOf(user) &gt; 0</code> (or <code>hasTrait(user, \"Spanish-A2\")</code>).</li> <li>Fallback: allow observer role without SBT (no paid host privileges).</li> </ul>"},{"location":"tech/dao-vetting/#d-minimal-sbt-contract-properties","title":"D) Minimal SBT contract (properties)","text":"<ul> <li>Non-transferable (override <code>transferFrom/safeTransferFrom</code> to revert).</li> <li>Mint only by DAO Multisig.</li> <li>Burn only by Multisig (revocation) or owner+Multisig (appeal outcome).</li> <li>tokenURI = IPFS metadata; consider an Attestation layer later (EAS).</li> </ul>"},{"location":"tech/integrations/","title":"Integrations","text":""},{"location":"tech/integrations/#huddle01-live","title":"Huddle01 (live)","text":"<ul> <li>Wallet-gated rooms</li> <li>Session host &amp; participants</li> <li>Recording optional</li> </ul>"},{"location":"tech/integrations/#poap-credentials-live","title":"POAP / Credentials (live)","text":"<ul> <li>Mint proof of completion</li> <li>Display in wallet/portfolio</li> </ul>"},{"location":"tech/integrations/#streaming-payments","title":"Streaming payments","text":"<ul> <li>Superfluid</li> <li>Sablier</li> <li>PYUSD</li> </ul>"},{"location":"tech/integrations/#futureoptional","title":"Future/Optional","text":"<ul> <li>Chainlink (data feeds / proofs)</li> <li>Attestation layers</li> <li>Storage (IPFS/Arweave)</li> </ul>"}]}